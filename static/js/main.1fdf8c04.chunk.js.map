{"version":3,"sources":["customBlocks/expressions.js","customBlocks/operations.js","customBlocks/variables.js","customBlocks/logic.js","customBlocks/conditionals.js","customBlocks/loops.js","customBlocks/movement.js","App.js","reportWebVitals.js","index.js"],"names":["Blockly","Blocks","init","this","appendDummyInput","appendField","FieldTextInput","setOutput","String","setColour","JavaScript","block","variableName","getFieldValue","ORDER_ATOMIC","FieldNumber","Number","FieldDropdown","appendValueInput","setCheck","setInputsInline","number1","valueToCode","ORDER_ADDITION","number2","setNextStatement","setPreviousStatement","variableValue","Boolean","ORDER_EQUALITY","ORDER_RELATIONAL","itemCount_","list_","prevCount_","updateShape_","setMutator","Mutator","mutationToDom","container","utils","xml","createElement","setAttribute","JSON","stringify","domToMutation","xmlElement","parseInt","getAttribute","parse","decompose","workspace","blocks","newBlock","initSvg","i","nextConnection","connect","previousConnection","compose","topBlock","seg","blockToCode","split","pop","length","Math","max","removeInput","forEach","e","appendStatementInput","conditions","map","getInput","statements","statementToCode","code","cond","stmt","setTooltip","setHelpUrl","steps","App","toolboxCategories","name","colour","type","initialXml","wrapperDivClassName","workspaceConfiguration","grid","spacing","snap","workspaceDidChange","topBlocks","getTopBlocks","valid","allInputsFilled","workspaceToCode","fs","document","getElementById","value","id","style","height","width","onClick","setInterval","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.1fdf8c04.chunk.js","sourcesContent":["import Blockly from \"blockly\";\r\n\r\nBlockly.Blocks[\"text_expression\"] = {\r\n    init: function () {\r\n        this.appendDummyInput()\r\n            .appendField(\"String: \")\r\n            .appendField(new Blockly.FieldTextInput(\"\"), \"value\");\r\n        this.setOutput(true, String);\r\n        this.setColour(105);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"text_expression\"] = function (block) {\r\n    let variableName = block.getFieldValue(\"value\");\r\n    var code = `\"${variableName}\"`;\r\n    return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n};\r\n\r\nBlockly.Blocks[\"number_expression\"] = {\r\n    init: function () {\r\n        this.appendDummyInput()\r\n            .appendField(\"Number: \")\r\n            .appendField(new Blockly.FieldNumber(0), \"value\");\r\n        this.setOutput(true, Number);\r\n        this.setColour(105);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"number_expression\"] = function (block) {\r\n    let variableName = block.getFieldValue(\"value\");\r\n    var code = `${variableName}`;\r\n    return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n};\r\n\r\nBlockly.Blocks[\"boolean_expression\"] = {\r\n    init: function () {\r\n        this.appendDummyInput()\r\n            .appendField(\"Boolean: \")\r\n            .appendField(new Blockly.FieldDropdown([\r\n                ['true', 'true'],\r\n                ['false', 'false']\r\n            ]), \"value\");\r\n        this.setOutput(true);\r\n        this.setColour(105);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"boolean_expression\"] = function (block) {\r\n    let variableName = block.getFieldValue(\"value\");\r\n    var code = `${variableName}`;\r\n    return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n};","import Blockly from \"blockly\";\r\n\r\nBlockly.Blocks[\"add_operation\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"number1\")\r\n            .setCheck(Number)\r\n            .appendField(\"Add \")\r\n        this.appendValueInput(\"number2\")\r\n            .setCheck(Number)\r\n            .appendField(\" with \");;\r\n        this.setInputsInline(true);\r\n        this.setOutput(true);\r\n        this.setColour(105);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"add_operation\"] = function (block) {\r\n    let number1 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number1\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    let number2 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number2\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    var code = `${number1} + ${number2}`;\r\n    return [code, Blockly.JavaScript.ORDER_ADDITION];\r\n};\r\n\r\nBlockly.Blocks[\"sub_operation\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"number1\")\r\n            .setCheck(Number)\r\n            .appendField(\"Subtract \")\r\n        this.appendValueInput(\"number2\")\r\n            .setCheck(Number)\r\n            .appendField(\" with \");;\r\n        this.setInputsInline(true);\r\n        this.setOutput(true);\r\n        this.setColour(105);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"sub_operation\"] = function (block) {\r\n    let number1 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number1\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    let number2 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number2\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    var code = `${number1} - ${number2}`;\r\n    return [code, Blockly.JavaScript.ORDER_ADDITION];\r\n};\r\n\r\nBlockly.Blocks[\"mul_operation\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"number1\")\r\n            .setCheck(Number)\r\n            .appendField(\"Multiply \")\r\n        this.appendValueInput(\"number2\")\r\n            .setCheck(Number)\r\n            .appendField(\" with \");;\r\n        this.setInputsInline(true);\r\n        this.setOutput(true);\r\n        this.setColour(105);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"mul_operation\"] = function (block) {\r\n    let number1 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number1\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    let number2 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number2\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    var code = `${number1} * ${number2}`;\r\n    return [code, Blockly.JavaScript.ORDER_ADDITION];\r\n};\r\n\r\nBlockly.Blocks[\"div_operation\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"number1\")\r\n            .setCheck(Number)\r\n            .appendField(\"Divide \")\r\n        this.appendValueInput(\"number2\")\r\n            .setCheck(Number)\r\n            .appendField(\" with \");;\r\n        this.setInputsInline(true);\r\n        this.setOutput(true);\r\n        this.setColour(105);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"div_operation\"] = function (block) {\r\n    let number1 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number1\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    let number2 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number2\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    var code = `${number1} / ${number2}`;\r\n    return [code, Blockly.JavaScript.ORDER_ADDITION];\r\n};\r\n\r\nBlockly.Blocks[\"mod_operation\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"number1\")\r\n            .setCheck(Number)\r\n            .appendField(\"Modulo of \")\r\n        this.appendValueInput(\"number2\")\r\n            .setCheck(Number)\r\n            .appendField(\" with \");;\r\n        this.setInputsInline(true);\r\n        this.setOutput(true);\r\n        this.setColour(105);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"mod_operation\"] = function (block) {\r\n    let number1 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number1\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    let number2 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number2\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    var code = `${number1} % ${number2}`;\r\n    return [code, Blockly.JavaScript.ORDER_ADDITION];\r\n};\r\n","import Blockly from \"blockly\";\r\n\r\nBlockly.Blocks[\"variable_set\"] = {\r\n    init: function () {\r\n        this.appendDummyInput()\r\n            .appendField(\"define \")\r\n            .appendField(new Blockly.FieldTextInput(\"\"), \"variableName\")\r\n            .appendField(\" as \");\r\n        this.appendValueInput(\"variableValue\")\r\n            .setCheck(null);\r\n        this.setInputsInline(true);\r\n        this.setNextStatement(true);\r\n        this.setPreviousStatement(true);\r\n        this.setColour(105);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"variable_set\"] = function (block) {\r\n    let variableName = block.getFieldValue(\"variableName\");\r\n    let variableValue = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"variableValue\",\r\n        Blockly.JavaScript.ORDER_ATOMIC\r\n    )\r\n    let code = `let ${variableName} = ${variableValue};\\n`;\r\n    return code;\r\n};\r\n\r\nBlockly.Blocks[\"variable_modify\"] = {\r\n    init: function () {\r\n        this.appendDummyInput()\r\n            .appendField(\"modify \")\r\n            .appendField(new Blockly.FieldTextInput(\"\"), \"variableName\")\r\n            .appendField(\" to \");\r\n        this.appendValueInput(\"variableValue\")\r\n            .setCheck(null);\r\n        this.setColour(105);        \r\n        this.setInputsInline(true);\r\n        this.setNextStatement(true);\r\n        this.setPreviousStatement(true);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"variable_modify\"] = function (block) {\r\n    let variableName = block.getFieldValue(\"variableName\");\r\n    let variableValue = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"variableValue\",\r\n        Blockly.JavaScript.ORDER_ATOMIC\r\n    );\r\n    let code = `${variableName} = ${variableValue};\\n`;\r\n    return code;\r\n};\r\n\r\nBlockly.Blocks[\"variable_get\"] = {\r\n    init: function () {\r\n        this.appendDummyInput()\r\n            .appendField(new Blockly.FieldTextInput(\"\"), \"value\");\r\n        this.setOutput(true);\r\n        this.setColour(105);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"variable_get\"] = function (block) {\r\n    let variableName = block.getFieldValue(\"value\");\r\n    var code = `${variableName}`;\r\n    return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n};","import Blockly from \"blockly\";\r\n\r\nBlockly.Blocks[\"equals_logic\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"number1\")\r\n            .setCheck(Number)\r\n        this.appendValueInput(\"number2\")\r\n            .setCheck(Number)\r\n            .appendField(\" = \");;\r\n        this.setInputsInline(true);\r\n        this.setOutput(true, Boolean);\r\n        this.setColour(105);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"equals_logic\"] = function (block) {\r\n    let number1 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number1\",\r\n        Blockly.JavaScript.ORDER_EQUALITY \r\n    );\r\n    let number2 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number2\",\r\n        Blockly.JavaScript.ORDER_EQUALITY \r\n    );\r\n    var code = `${number1} === ${number2}`;\r\n    return [code, Blockly.JavaScript.ORDER_EQUALITY];\r\n};\r\n\r\nBlockly.Blocks[\"not_equals_logic\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"number1\")\r\n            .setCheck(Number)\r\n        this.appendValueInput(\"number2\")\r\n            .setCheck(Number)\r\n            .appendField(\" != \");;\r\n        this.setInputsInline(true);\r\n        this.setOutput(true, Boolean);\r\n        this.setColour(105);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"not_equals_logic\"] = function (block) {\r\n    let number1 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number1\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    let number2 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number2\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    var code = `${number1} !== ${number2}`;\r\n    return [code, Blockly.JavaScript.ORDER_EQUALITY];\r\n};\r\n\r\nBlockly.Blocks[\"less_than_logic\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"number1\")\r\n            .setCheck(Number)\r\n        this.appendValueInput(\"number2\")\r\n            .setCheck(Number)\r\n            .appendField(\" < \");;\r\n        this.setInputsInline(true);\r\n        this.setOutput(true, Boolean);\r\n        this.setColour(105);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"less_than_logic\"] = function (block) {\r\n    let number1 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number1\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    let number2 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number2\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    var code = `${number1} < ${number2}`;\r\n    return [code, Blockly.JavaScript.ORDER_RELATIONAL];\r\n};\r\n\r\nBlockly.Blocks[\"greater_than_logic\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"number1\")\r\n            .setCheck(Number)\r\n        this.appendValueInput(\"number2\")\r\n            .setCheck(Number)\r\n            .appendField(\" > \");;\r\n        this.setInputsInline(true);\r\n        this.setOutput(true, Boolean);\r\n        this.setColour(105);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"greater_than_logic\"] = function (block) {\r\n    let number1 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number1\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    let number2 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number2\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    var code = `${number1} > ${number2}`;\r\n    return [code, Blockly.JavaScript.ORDER_RELATIONAL];\r\n};\r\n\r\nBlockly.Blocks[\"less_than_equals_logic\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"number1\")\r\n            .setCheck(Number)\r\n        this.appendValueInput(\"number2\")\r\n            .setCheck(Number)\r\n            .appendField(\" <= \");;\r\n        this.setInputsInline(true);\r\n        this.setOutput(true, Boolean);\r\n        this.setColour(105);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"less_than_equals_logic\"] = function (block) {\r\n    let number1 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number1\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    let number2 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number2\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    var code = `${number1} <= ${number2}`;\r\n    return [code, Blockly.JavaScript.ORDER_RELATIONAL];\r\n};\r\n\r\nBlockly.Blocks[\"greater_than_equals_logic\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"number1\")\r\n            .setCheck(Number)\r\n        this.appendValueInput(\"number2\")\r\n            .setCheck(Number)\r\n            .appendField(\" >= \");;\r\n        this.setInputsInline(true);\r\n        this.setOutput(true, Boolean);\r\n        this.setColour(105);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"greater_than_equals_logic\"] = function (block) {\r\n    let number1 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number1\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    let number2 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number2\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    var code = `${number1} >= ${number2}`;\r\n    return [code, Blockly.JavaScript.ORDER_RELATIONAL];\r\n};\r\n\r\nBlockly.Blocks[\"mul_operation\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"number1\")\r\n            .setCheck(Number)\r\n            .appendField(\"Multiply \")\r\n        this.appendValueInput(\"number2\")\r\n            .setCheck(Number)\r\n            .appendField(\" with \");;\r\n        this.setInputsInline(true);\r\n        this.setOutput(true);\r\n        this.setColour(105);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"mul_operation\"] = function (block) {\r\n    let number1 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number1\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    let number2 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number2\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    var code = `${number1} * ${number2}`;\r\n    return [code, Blockly.JavaScript.ORDER_ADDITION];\r\n};\r\n\r\nBlockly.Blocks[\"div_operation\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"number1\")\r\n            .setCheck(Number)\r\n            .appendField(\"Divide \")\r\n        this.appendValueInput(\"number2\")\r\n            .setCheck(Number)\r\n            .appendField(\" with \");;\r\n        this.setInputsInline(true);\r\n        this.setOutput(true);\r\n        this.setColour(105);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"div_operation\"] = function (block) {\r\n    let number1 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number1\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    let number2 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number2\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    var code = `${number1} / ${number2}`;\r\n    return [code, Blockly.JavaScript.ORDER_ADDITION];\r\n};\r\n\r\nBlockly.Blocks[\"mod_operation\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"number1\")\r\n            .setCheck(Number)\r\n            .appendField(\"Modulo of \")\r\n        this.appendValueInput(\"number2\")\r\n            .setCheck(Number)\r\n            .appendField(\" with \");;\r\n        this.setInputsInline(true);\r\n        this.setOutput(true);\r\n        this.setColour(105);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"mod_operation\"] = function (block) {\r\n    let number1 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number1\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    let number2 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number2\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    var code = `${number1} % ${number2}`;\r\n    return [code, Blockly.JavaScript.ORDER_ADDITION];\r\n};\r\n","import Blockly from \"blockly\";\r\n\r\nBlockly.Blocks['if'] = {\r\n    init: function () {\r\n        this.appendDummyInput().appendField(\"if\");\r\n        this.setNextStatement(true);\r\n    }\r\n}\r\n\r\nBlockly.JavaScript['if'] = function (block) {\r\n    return 'if\\n';\r\n};\r\n\r\nBlockly.Blocks['else_if'] = {\r\n    init: function () {\r\n        this.appendDummyInput().appendField(\"else if\");\r\n        this.setNextStatement(true);\r\n        this.setPreviousStatement(true);\r\n    }\r\n}\r\n\r\nBlockly.JavaScript['else_if'] = function (block) {\r\n    return 'else_if\\n';\r\n};\r\n\r\nBlockly.Blocks['else'] = {\r\n    init: function () {\r\n        this.appendDummyInput().appendField(\"else\");\r\n        this.setPreviousStatement(true);\r\n    }\r\n}\r\n\r\nBlockly.JavaScript['else'] = function (block) {\r\n    return 'else\\n';\r\n};\r\n\r\nBlockly.Blocks[\"if_conditional\"] = {\r\n    init: function () {\r\n        this.itemCount_ = 1;\r\n        this.list_ = ['if'];\r\n        this.prevCount_ = 1;\r\n        this.updateShape_();\r\n        this.setMutator(new Blockly.Mutator(['if', 'else_if', 'else']))\r\n    },\r\n    mutationToDom: function () {\r\n        let container = Blockly.utils.xml.createElement('mutation');\r\n        container.setAttribute('itemCount', this.itemCount_);\r\n        container.setAttribute('prevCount', this.prevCount_);\r\n        container.setAttribute('list', JSON.stringify(this.list_));\r\n        return container;\r\n    },\r\n    domToMutation: function (xmlElement) {\r\n        this.itemCount_ = parseInt(xmlElement.getAttribute('itemCount'), 10);\r\n        this.prevCount_ = parseInt(xmlElement.getAttribute('prevCount'), 10);\r\n        this.list_ = JSON.parse(xmlElement.getAttribute('list'))\r\n        this.updateShape_();\r\n    },\r\n    decompose: function (workspace) {\r\n        // This is a special sub-block that only gets created in the mutator UI.\r\n        // It acts as our \"top block\"\r\n        let blocks = [];\r\n\r\n        blocks[0] = workspace.newBlock('if');\r\n        blocks[0].initSvg();\r\n        \r\n        for (let i = 1; i < this.itemCount_; i++) {\r\n            blocks[i] = workspace.newBlock(this.list_[i]);\r\n            blocks[i].initSvg();\r\n            blocks[i - 1].nextConnection.connect(blocks[i].previousConnection);\r\n        }\r\n\r\n        // And finally we have to return the top-block.\r\n        return blocks[0];\r\n    },\r\n    compose: function (topBlock) {\r\n\r\n        let code = Blockly.JavaScript.blockToCode(topBlock);\r\n        \r\n        const seg = code.split('\\n'); seg.pop();\r\n        \r\n        this.prevCount_ = this.itemCount_;\r\n        this.itemCount_ = seg.length;\r\n        this.list_ = seg;\r\n\r\n        this.updateShape_();\r\n    },\r\n    updateShape_: function () {\r\n        for (let i = 0; i < Math.max(this.prevCount_, this.itemCount_); i++) {\r\n            this.removeInput('statement_'+i, true);\r\n            this.removeInput('condition_'+i, true);\r\n        }\r\n        this.list_.forEach(((e, i) => {\r\n            if (e === 'if') {\r\n                this.appendValueInput(\"condition_\"+i)\r\n                    .setCheck(null)\r\n                    .appendField(\"if\");\r\n                this.appendStatementInput(\"statement_\"+i)\r\n                    .setCheck(null)\r\n                    .appendField(\"then\");\r\n            } else if (e === 'else_if') {\r\n                this.appendValueInput(\"condition_\"+i)\r\n                    .setCheck(null)\r\n                    .appendField(\"else if\");\r\n                this.appendStatementInput(\"statement_\"+i)\r\n                    .setCheck(null)\r\n                    .appendField(\"then\");\r\n            } else {\r\n                this.appendStatementInput(\"statement_\"+i)\r\n                    .setCheck(null)\r\n                    .appendField(\"else\");\r\n            }\r\n        }))\r\n        this.setPreviousStatement(true, null);\r\n        this.setNextStatement(true, null);\r\n        this.setColour(230);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"if_conditional\"] = function (block) {\r\n    let conditions = block.list_.map((e, i) => {\r\n        if (((e === 'if') || (e === 'else_if')) && block.getInput('condition_'+i)) {\r\n            return Blockly.JavaScript.valueToCode(\r\n                block,\r\n                \"condition_\"+i,\r\n                Blockly.JavaScript.ORDER_ATOMIC \r\n            );\r\n        } else {\r\n            return null;\r\n        }\r\n    });\r\n    let statements = block.list_.map((e, i) => {\r\n        return block.getInput('statement_'+i) ?\r\n             Blockly.JavaScript.statementToCode(block, \"statement_\"+i) : null;\r\n    });\r\n    let code = '';\r\n    block.list_.forEach((e, i) => {\r\n        if (e === 'if') {\r\n            code += `if (${conditions[i]}) {\\n${statements[i]}\\n} `\r\n        } else if (e === 'else_if') {\r\n            code += `else if (${conditions[i]}) {\\n${statements[i]}\\n} `\r\n        } else {\r\n            code += `else {\\n${statements[i]}}\\n`\r\n        }\r\n    })\r\n    return code;\r\n};\r\n","import Blockly from \"blockly\";\r\n\r\nBlockly.Blocks[\"loops_while\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"condition\")\r\n            .setCheck(Boolean)\r\n            .appendField(\"while \");\r\n        this.appendStatementInput(\"statement\")\r\n            .setCheck(null)\r\n            .appendField(\"else\");\r\n        this.setInputsInline(true);\r\n        this.setOutput(true);\r\n        this.setColour(105);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"loops_while\"] = function (block) {\r\n    let cond = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"condition\",\r\n        Blockly.JavaScript.ORDER_ATOMIC \r\n    );\r\n    let stmt = Blockly.JavaScript.statementToCode(block, \"statement\")\r\n    let code = `while (${cond}) {\\n${stmt}}\\n`;\r\n    return code;\r\n};","import Blockly from \"blockly\";\r\n\r\nBlockly.Blocks[\"move\"] = {\r\n    init: function () {\r\n        this.appendDummyInput()\r\n            .appendField(\"Move\")\r\n            .appendField(new Blockly.FieldNumber(0), \"steps\")\r\n            .appendField(\"steps\");\r\n        this.setPreviousStatement(true, null);\r\n        this.setNextStatement(true, null);\r\n        this.setColour(230);\r\n        this.setTooltip(\"\");\r\n        this.setHelpUrl(\"\");\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"move\"] = function (block) {\r\n    let steps = block.getFieldValue(\"steps\");\r\n    let code = `console.log(${steps});\\n`;\r\n    return code;\r\n};\r\n","import \"./App.css\";\nimport \"./customBlocks/expressions\";\nimport \"./customBlocks/operations\";\nimport \"./customBlocks/variables\";\nimport \"./customBlocks/logic\"\nimport \"./customBlocks/conditionals\";\nimport \"./customBlocks/loops\";\nimport \"./customBlocks/movement\";\nimport React from \"react\";\nimport ReactBlockly from \"react-blockly\";\nimport Blockly from \"blockly\";\nimport * as fs from \"browserify-fs\";\n\nexport default function App() {\n    const initialXml =\n        '<xml xmlns=\"https://developers.google.com/blockly/xml\"></xml>';\n\n    const toolboxCategories = [\n        {\n            name: \"Variables\",\n            colour: \"#5CA699\",\n            blocks: [\n                {\n                    type: \"variable_set\"\n                },\n                {\n                    type: \"variable_modify\"\n                },\n                {\n                    type: \"variable_get\"\n                }\n            ]\n        },\n        {\n            name: \"Expressions\",\n            colour: \"#5CA699\",\n            blocks: [\n                {\n                    type: \"text_expression\"\n                },\n                {\n                    type: \"number_expression\"\n                },\n                {\n                    type: \"boolean_expression\"\n                }\n            ]\n        },\n        {\n            name: \"Operations\",\n            colour: \"#5C81A6\",\n            blocks: [\n                {\n                    type: \"add_operation\"\n                },\n                {\n                    type: \"sub_operation\"\n                },\n                {\n                    type: \"mul_operation\"\n                },\n                {\n                    type: \"div_operation\"\n                },\n                {\n                    type: \"mod_operation\"\n                }\n            ]\n        },\n        {\n            name: \"Logic\",\n            colour: \"#5C81A6\",\n            blocks: [\n                {\n                    type: \"equals_logic\"\n                },\n                {\n                    type: \"not_equals_logic\"\n                },\n                {\n                    type: \"less_than_logic\"\n                },\n                {\n                    type: \"greater_than_logic\"\n                },\n                {\n                    type: \"less_than_equals_logic\"\n                },\n                {\n                    type: \"greater_than_equals_logic\"\n                },\n            ]\n        },\n        {\n            name: \"Control\",\n            colour: \"#5C81A6\",\n            blocks: [\n                {\n                    type: \"if_conditional\"\n                },\n                {\n                    type: \"loops_while\"\n                }\n            ]\n        },\n        {\n            name: \"Motion\",\n            colour: \"#5C81A6\",\n            blocks: [\n                {\n                    type: \"move\"\n                }\n            ]\n        }\n    ];\n\n    function workspaceDidChange(workspace) {\n        const topBlocks = workspace.getTopBlocks(true);\n        let valid = true;\n        topBlocks.forEach(e => {\n            valid = valid & (e.allInputsFilled())\n        })\n        let code = null;\n        if (valid) {\n            code = Blockly.JavaScript.workspaceToCode(workspace);\n        } else {\n            code = 'Ensure all the blocks and statements are filled'\n        }\n        fs.writeFile(\"./bot.js\", \"code\");\n        document.getElementById(\"code\").value = code;\n    }\n\n    return (\n        <>\n            <ReactBlockly\n                toolboxCategories={toolboxCategories}\n                initialXml={initialXml}\n                wrapperDivClassName=\"fill-height\"\n                workspaceConfiguration={{\n                    grid: {\n                        spacing: 20,\n                        length: 3,\n                        colour: \"#ccc\",\n                        snap: true\n                    }\n                }}\n                workspaceDidChange={workspaceDidChange}\n            />\n            <textarea\n                id=\"code\"\n                style={{ height: \"400px\", width: \"400px\" }}\n                value=\"\"\n            ></textarea>\n            <button onClick={() => setInterval(document.getElementById(\"code\").value, 0)}>Run</button>\n        </>\n    );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}