{"version":3,"sources":["DrawCanvas.js","customBlocks/expressions.js","customBlocks/operations.js","customBlocks/variables.js","customBlocks/logic.js","customBlocks/conditionals.js","customBlocks/loops.js","customBlocks/movement.js","customBlocks/shapes.js","BlocklyApp.js","App.js","reportWebVitals.js","index.js"],"names":["DrawCanvas","props","canvasRef","React","useRef","command","resetFn","rest","currCanvas","useEffect","includes","window","confirm","canvas","current","context","getContext","restore","clearRect","width","height","save","translate","saveCanvasDrawing","eval","e","SyntaxError","alert","message","getImageData","loadCanvasDrawing","putImageData","parseCmd","split","dir","value","angle","resultDir","Number","toUpperCase","deg2Rad","deg","Math","PI","drawTurtle","ctx","stroke","strokeStyle","beginPath","moveTo","lineTo","closePath","sleep","milliseconds","Promise","resolve","setTimeout","draw","console","log","rotate","pendown","penup","ref","Blockly","Blocks","init","this","appendDummyInput","appendField","FieldTextInput","setOutput","String","setColour","JavaScript","block","variableName","getFieldValue","ORDER_ATOMIC","FieldNumber","FieldDropdown","Boolean","appendValueInput","setCheck","setInputsInline","number1","valueToCode","ORDER_ADDITION","number2","ORDER_SUBTRACTION","ORDER_MULTIPLICATION","ORDER_DIVISION","ORDER_MODULUS","setPreviousStatement","setNextStatement","variableValue","ORDER_EQUALITY","ORDER_RELATIONAL","ORDER_LOGICAL_AND","ORDER_LOGICAL_OR","itemCount_","list_","prevCount_","updateShape_","setMutator","Mutator","mutationToDom","container","utils","xml","createElement","setAttribute","JSON","stringify","domToMutation","xmlElement","parseInt","getAttribute","parse","decompose","workspace","blocks","newBlock","initSvg","i","nextConnection","connect","previousConnection","compose","topBlock","seg","blockToCode","pop","length","max","removeInput","forEach","appendStatementInput","conditions","map","getInput","statements","statementToCode","code","cond","stmt","init_val","final_val","iter_var","random","toString","slice","setTooltip","setHelpUrl","steps","degrees","x_dis","y_dis","side_length","breadth","radius","BlocklyApp","toolboxCategories","name","colour","type","initialXml","wrapperDivClassName","workspaceConfiguration","grid","spacing","snap","workspaceDidChange","topBlocks","getTopBlocks","valid","allInputsFilled","workspaceToCode","fs","document","getElementById","TextArea","Input","App","useState","setCommand","span","onClick","style","border","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.98c4c77e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst DrawCanvas = props => {\r\n    const canvasRef = React.useRef(null);\r\n    let { command, resetFn, ...rest} = props;\r\n    const currCanvas = React.useRef(null);\r\n\r\n    React.useEffect(() => {\r\n        if (command.includes('while')) {\r\n            if (!window.confirm('Are you sure all while loops are terminating?')) {\r\n                command = 'Ensure all the blocks and statements are filled'\r\n            }\r\n        }\r\n        if (command === 'Ensure all the blocks and statements are filled') {}\r\n        else {\r\n            const canvas = canvasRef.current;\r\n            const context = canvas.getContext('2d');\r\n            context.restore();\r\n            context.clearRect(0, 0, canvas.width, canvas.height);\r\n            context.save();\r\n            context.translate(canvas.width / 2, canvas.height / 2);\r\n            saveCanvasDrawing(context, canvas);\r\n            try {\r\n                eval(command); \r\n            } catch (e) {\r\n                if (e instanceof SyntaxError) {\r\n                    alert(e.message);\r\n                } else { \r\n                    alert(e)\r\n                }\r\n            }\r\n        }\r\n    }, [command]);\r\n\r\n    const saveCanvasDrawing = (context, canvas) => {\r\n        currCanvas.current = context.getImageData(0, 0, canvas.width, canvas.height);\r\n    }\r\n\r\n    const loadCanvasDrawing = context => {\r\n        context.putImageData(currCanvas.current, 0, 0);\r\n    }\r\n\r\n    const parseCmd = command => {\r\n        let [dir, value] = command.split(\" \")\r\n        let angle = 0\r\n        let resultDir = \"\"\r\n        value = Number(value)\r\n        switch (dir.toUpperCase()) {\r\n            case \"FD\":\r\n                resultDir = \"FORWARD\"\r\n                break\r\n            case \"BK\":\r\n                resultDir = \"BACKWARD\"\r\n                angle = 180\r\n                break\r\n            case \"LT\":\r\n                resultDir = \"LEFT\"\r\n                angle = -value\r\n                break\r\n            case \"RT\":\r\n                resultDir = \"RIGHT\"\r\n                angle = value\r\n                break\r\n        }\r\n        return {\r\n            dir: resultDir,\r\n            value,\r\n            angle: deg2Rad(angle),\r\n        }\r\n    }\r\n\r\n    const deg2Rad = deg => {\r\n        return (deg * Math.PI) / 180\r\n    }\r\n\r\n    const drawTurtle = ctx => {\r\n        const stroke = ctx.strokeStyle\r\n        ctx.strokeStyle = \"rgb(0, 0, 0)\"\r\n        ctx.beginPath()\r\n        ctx.moveTo(-7, -7)\r\n        ctx.lineTo(0, 7)\r\n        ctx.lineTo(7, -7)\r\n        ctx.closePath()\r\n        ctx.stroke()\r\n        ctx.strokeStyle = stroke\r\n    }\r\n\r\n    const sleep = (milliseconds) => {\r\n        return new Promise(resolve => setTimeout(resolve, milliseconds))\r\n    }\r\n\r\n    const draw = (command, ctx) => {\r\n        const { dir, angle, value } = parseCmd(command)\r\n        console.log(dir, angle, value)\r\n        ctx.rotate(angle)\r\n        if (dir === \"FORWARD\" || dir === \"BACKWARD\") {\r\n            ctx.beginPath()\r\n            ctx.moveTo(0, 0)\r\n            ctx.lineTo(0, value)\r\n            ctx.translate(0, value)\r\n            ctx.closePath()\r\n            ctx.stroke()\r\n        }\r\n    }\r\n\r\n    const pendown = (ctx) => {\r\n        ctx.strokeStyle = \"rgb(0, 0, 0)\"\r\n    }\r\n\r\n    const penup = (ctx) => {\r\n        ctx.strokeStyle = \"rgb(255, 255, 255)\"\r\n    }\r\n\r\n    return <canvas ref={canvasRef} {...rest} />\r\n}\r\n\r\nexport default DrawCanvas;","import Blockly from \"blockly\";\r\n\r\nBlockly.Blocks[\"text_expression\"] = {\r\n    init: function () {\r\n        this.appendDummyInput()\r\n            .appendField(\"String: \")\r\n            .appendField(new Blockly.FieldTextInput(\"\"), \"value\");\r\n        this.setOutput(true, String);\r\n        this.setColour(\"#66cc00\");\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"text_expression\"] = function (block) {\r\n    let variableName = block.getFieldValue(\"value\");\r\n    let code = `\"${variableName}\"`;\r\n    return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n};\r\n\r\nBlockly.Blocks[\"number_expression\"] = {\r\n    init: function () {\r\n        this.appendDummyInput()\r\n            .appendField(\"Number: \")\r\n            .appendField(new Blockly.FieldNumber(0), \"value\");\r\n        this.setOutput(true, Number);\r\n        this.setColour(\"#66cc00\");\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"number_expression\"] = function (block) {\r\n    let variableName = block.getFieldValue(\"value\");\r\n    let code = `${variableName}`;\r\n    return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n};\r\n\r\nBlockly.Blocks[\"boolean_expression\"] = {\r\n    init: function () {\r\n        this.appendDummyInput()\r\n            .appendField(\"Boolean: \")\r\n            .appendField(new Blockly.FieldDropdown([\r\n                ['true', 'true'],\r\n                ['false', 'false']\r\n            ]), \"value\");\r\n        this.setOutput(true,Boolean);\r\n        this.setColour(\"#66cc00\");\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"boolean_expression\"] = function (block) {\r\n    let variableName = block.getFieldValue(\"value\");\r\n    let code = `${variableName}`;\r\n    return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n};","import Blockly from \"blockly\";\r\n\r\nBlockly.Blocks[\"add_operation\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"number1\")\r\n            .setCheck(Number)\r\n            .appendField(\"Add \")\r\n        this.appendValueInput(\"number2\")\r\n            .setCheck(Number)\r\n            .appendField(\" with \");;\r\n        this.setInputsInline(true);\r\n        this.setOutput(true);\r\n        this.setColour(\"#33cccc\");\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"add_operation\"] = function (block) {\r\n    let number1 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number1\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    let number2 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number2\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    let code = `${number1} + ${number2}`;\r\n    return [code, Blockly.JavaScript.ORDER_ADDITION];\r\n};\r\n\r\nBlockly.Blocks[\"sub_operation\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"number1\")\r\n            .setCheck(Number)\r\n            .appendField(\"Subtract \")\r\n        this.appendValueInput(\"number2\")\r\n            .setCheck(Number)\r\n            .appendField(\" with \");;\r\n        this.setInputsInline(true);\r\n        this.setOutput(true);\r\n        this.setColour(\"#33cccc\");\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"sub_operation\"] = function (block) {\r\n    let number1 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number1\",\r\n        Blockly.JavaScript.ORDER_SUBTRACTION \r\n    );\r\n    let number2 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number2\",\r\n        Blockly.JavaScript.ORDER_SUBTRACTION \r\n    );\r\n    let code = `${number1} - ${number2}`;\r\n    return [code, Blockly.JavaScript.ORDER_SUBTRACTION];\r\n};\r\n\r\nBlockly.Blocks[\"mul_operation\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"number1\")\r\n            .setCheck(Number)\r\n            .appendField(\"Multiply \")\r\n        this.appendValueInput(\"number2\")\r\n            .setCheck(Number)\r\n            .appendField(\" with \");;\r\n        this.setInputsInline(true);\r\n        this.setOutput(true);\r\n        this.setColour(\"#33cccc\");\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"mul_operation\"] = function (block) {\r\n    let number1 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number1\",\r\n        Blockly.JavaScript.ORDER_MULTIPLICATION \r\n    );\r\n    let number2 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number2\",\r\n        Blockly.JavaScript.ORDER_MULTIPLICATION \r\n    );\r\n    let code = `${number1} * ${number2}`;\r\n    return [code, Blockly.JavaScript.ORDER_MULTIPLICATION];\r\n};\r\n\r\nBlockly.Blocks[\"div_operation\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"number1\")\r\n            .setCheck(Number)\r\n            .appendField(\"Divide \")\r\n        this.appendValueInput(\"number2\")\r\n            .setCheck(Number)\r\n            .appendField(\" with \");;\r\n        this.setInputsInline(true);\r\n        this.setOutput(true);\r\n        this.setColour(\"#33cccc\");\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"div_operation\"] = function (block) {\r\n    let number1 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number1\",\r\n        Blockly.JavaScript.ORDER_DIVISION \r\n    );\r\n    let number2 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number2\",\r\n        Blockly.JavaScript.ORDER_DIVISION \r\n    );\r\n    let code = `${number1} / ${number2}`;\r\n    return [code, Blockly.JavaScript.ORDER_DIVISION];\r\n};\r\n\r\nBlockly.Blocks[\"mod_operation\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"number1\")\r\n            .setCheck(Number)\r\n            .appendField(\"Modulo of \")\r\n        this.appendValueInput(\"number2\")\r\n            .setCheck(Number)\r\n            .appendField(\" with \");;\r\n        this.setInputsInline(true);\r\n        this.setOutput(true);\r\n        this.setColour(\"#33cccc\");\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"mod_operation\"] = function (block) {\r\n    let number1 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number1\",\r\n        Blockly.JavaScript.ORDER_MODULUS\r\n    );\r\n    let number2 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number2\",\r\n        Blockly.JavaScript.ORDER_MODULUS \r\n    );\r\n    let code = `${number1} % ${number2}`;\r\n    return [code, Blockly.JavaScript.ORDER_MODULUS];\r\n};\r\n\r\nBlockly.Blocks[\"inc_operation\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"number1\")\r\n            .setCheck('Variable')\r\n            .appendField(\"Increment \");\r\n        this.setInputsInline(true);\r\n        this.setPreviousStatement(true, null);\r\n        this.setNextStatement(true, null);\r\n        this.setColour(\"#33cccc\");\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"inc_operation\"] = function (block) {\r\n    let number1 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number1\",\r\n        Blockly.JavaScript.ORDER_ATOMIC\r\n    );\r\n    let code = `${number1} = ${number1} + 1;\\n`;\r\n    return code;\r\n};\r\n\r\nBlockly.Blocks[\"dec_operation\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"number1\")\r\n            .setCheck('Variable')\r\n            .appendField(\"Decrement \");\r\n        this.setInputsInline(true);\r\n        this.setPreviousStatement(true, null);\r\n        this.setNextStatement(true, null);\r\n        this.setColour(\"#33cccc\");\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"dec_operation\"] = function (block) {\r\n    let number1 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number1\",\r\n        Blockly.JavaScript.ORDER_ATOMIC\r\n    );\r\n    let code = `${number1} = ${number1} - 1;\\n`;\r\n    return code;\r\n};","import Blockly from \"blockly\";\r\n\r\nBlockly.Blocks[\"variable_set\"] = {\r\n    init: function () {\r\n        this.appendDummyInput()\r\n            .appendField(\"define \")\r\n            .appendField(new Blockly.FieldTextInput(\"\"), \"variableName\")\r\n            .appendField(\" as \");\r\n        this.appendValueInput(\"variableValue\")\r\n            .setCheck(null);\r\n        this.setInputsInline(true);\r\n        this.setNextStatement(true);\r\n        this.setPreviousStatement(true);\r\n        this.setColour(\"#cc7a00\");\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"variable_set\"] = function (block) {\r\n    let variableName = block.getFieldValue(\"variableName\");\r\n    let variableValue = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"variableValue\",\r\n        Blockly.JavaScript.ORDER_ATOMIC\r\n    )\r\n    let code = `let USER_VAR_${variableName} = ${variableValue};\\n`;\r\n    return code;\r\n};\r\n\r\nBlockly.Blocks[\"variable_modify\"] = {\r\n    init: function () {\r\n        this.appendDummyInput()\r\n            .appendField(\"modify \")\r\n            .appendField(new Blockly.FieldTextInput(\"\"), \"variableName\")\r\n            .appendField(\" to \");\r\n        this.appendValueInput(\"variableValue\")\r\n            .setCheck(null);\r\n        this.setColour(\"#cc7a00\");        \r\n        this.setInputsInline(true);\r\n        this.setNextStatement(true);\r\n        this.setPreviousStatement(true);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"variable_modify\"] = function (block) {\r\n    let variableName = block.getFieldValue(\"variableName\");\r\n    let variableValue = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"variableValue\",\r\n        Blockly.JavaScript.ORDER_ATOMIC\r\n    );\r\n    let code = `USER_VAR_${variableName} = ${variableValue};\\n`;\r\n    return code;\r\n};\r\n\r\nBlockly.Blocks[\"variable_get\"] = {\r\n    init: function () {\r\n        this.appendDummyInput()\r\n            .appendField(new Blockly.FieldTextInput(\"\"), \"value\");\r\n        this.setOutput(true, 'Variable');\r\n        this.setColour(\"#cc7a00\");\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"variable_get\"] = function (block) {\r\n    let variableName = block.getFieldValue(\"value\");\r\n    let code = `USER_VAR_${variableName}`;\r\n    return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n};","import Blockly from \"blockly\";\r\n\r\nBlockly.Blocks[\"equals_logic\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"number1\")\r\n            .setCheck([Number, 'Variable'])\r\n        this.appendValueInput(\"number2\")\r\n            .setCheck([Number, 'Variable'])\r\n            .appendField(\" = \");;\r\n        this.setInputsInline(true);\r\n        this.setOutput(true, Boolean);\r\n        this.setColour(\"#990099\");\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"equals_logic\"] = function (block) {\r\n    let number1 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number1\",\r\n        Blockly.JavaScript.ORDER_EQUALITY \r\n    );\r\n    let number2 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number2\",\r\n        Blockly.JavaScript.ORDER_EQUALITY \r\n    );\r\n    let code = `${number1} === ${number2}`;\r\n    return [code, Blockly.JavaScript.ORDER_EQUALITY];\r\n};\r\n\r\nBlockly.Blocks[\"not_equals_logic\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"number1\")\r\n            .setCheck([Number, 'Variable'])\r\n        this.appendValueInput(\"number2\")\r\n            .setCheck([Number, 'Variable'])\r\n            .appendField(\" != \");;\r\n        this.setInputsInline(true);\r\n        this.setOutput(true, Boolean);\r\n        this.setColour(\"#990099\");\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"not_equals_logic\"] = function (block) {\r\n    let number1 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number1\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    let number2 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number2\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    let code = `${number1} !== ${number2}`;\r\n    return [code, Blockly.JavaScript.ORDER_EQUALITY];\r\n};\r\n\r\nBlockly.Blocks[\"less_than_logic\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"number1\")\r\n            .setCheck([Number, 'Variable'])\r\n        this.appendValueInput(\"number2\")\r\n            .setCheck([Number, 'Variable'])\r\n            .appendField(\" < \");;\r\n        this.setInputsInline(true);\r\n        this.setOutput(true, Boolean);\r\n        this.setColour(\"#990099\");\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"less_than_logic\"] = function (block) {\r\n    let number1 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number1\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    let number2 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number2\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    let code = `${number1} < ${number2}`;\r\n    return [code, Blockly.JavaScript.ORDER_RELATIONAL];\r\n};\r\n\r\nBlockly.Blocks[\"greater_than_logic\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"number1\")\r\n            .setCheck([Number, 'Variable'])\r\n        this.appendValueInput(\"number2\")\r\n            .setCheck([Number, 'Variable'])\r\n            .appendField(\" > \");;\r\n        this.setInputsInline(true);\r\n        this.setOutput(true, Boolean);\r\n        this.setColour(\"#990099\");\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"greater_than_logic\"] = function (block) {\r\n    let number1 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number1\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    let number2 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number2\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    let code = `${number1} > ${number2}`;\r\n    return [code, Blockly.JavaScript.ORDER_RELATIONAL];\r\n};\r\n\r\nBlockly.Blocks[\"less_than_equals_logic\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"number1\")\r\n            .setCheck([Number, 'Variable'])\r\n        this.appendValueInput(\"number2\")\r\n            .setCheck([Number, 'Variable'])\r\n            .appendField(\" <= \");;\r\n        this.setInputsInline(true);\r\n        this.setOutput(true, Boolean);\r\n        this.setColour(\"#990099\");\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"less_than_equals_logic\"] = function (block) {\r\n    let number1 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number1\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    let number2 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number2\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    let code = `${number1} <= ${number2}`;\r\n    return [code, Blockly.JavaScript.ORDER_RELATIONAL];\r\n};\r\n\r\nBlockly.Blocks[\"greater_than_equals_logic\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"number1\")\r\n            .setCheck([Number, 'Variable'])\r\n        this.appendValueInput(\"number2\")\r\n            .setCheck([Number, 'Variable'])\r\n            .appendField(\" >= \");;\r\n        this.setInputsInline(true);\r\n        this.setOutput(true, Boolean);\r\n        this.setColour(\"#990099\");\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"greater_than_equals_logic\"] = function (block) {\r\n    let number1 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number1\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    let number2 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number2\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    let code = `${number1} >= ${number2}`;\r\n    return [code, Blockly.JavaScript.ORDER_RELATIONAL];\r\n};\r\n\r\n\r\nBlockly.Blocks[\"and_operation\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"number1\")\r\n            .setCheck([Boolean, 'Variable'])\r\n\r\n        this.appendValueInput(\"number2\")\r\n            .setCheck([Boolean, 'Variable'])\r\n            .appendField(\" and \");;\r\n        this.setInputsInline(true);\r\n        this.setOutput(true);\r\n        this.setColour(\"#990099\");\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"and_operation\"] = function (block) {\r\n    let number1 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number1\",\r\n        Blockly.JavaScript.ORDER_LOGICAL_AND\r\n    );\r\n    let number2 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number2\",\r\n        Blockly.JavaScript.ORDER_LOGICAL_AND\r\n    );\r\n    let code = `${number1} && ${number2}`;\r\n    return [code, Blockly.JavaScript.ORDER_LOGICAL_AND];\r\n};\r\n\r\nBlockly.Blocks[\"or_operation\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"number1\")\r\n            .setCheck([Boolean, 'Variable'])\r\n\r\n        this.appendValueInput(\"number2\")\r\n            .setCheck([Boolean, 'Variable'])\r\n            .appendField(\" or \");;\r\n        this.setInputsInline(true);\r\n        this.setOutput(true);\r\n        this.setColour(\"#990099\");\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"or_operation\"] = function (block) {\r\n    let number1 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number1\",\r\n        Blockly.JavaScript.ORDER_LOGICAL_OR\r\n    );\r\n    let number2 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number2\",\r\n        Blockly.JavaScript.ORDER_LOGICAL_OR\r\n    );\r\n    let code = `${number1} || ${number2}`;\r\n    return [code, Blockly.JavaScript.ORDER_LOGICAL_OR];\r\n};\r\n\r\nBlockly.Blocks[\"not_operation\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"number2\")\r\n            .setCheck([Boolean, 'Variable'])\r\n            .appendField(\" not \");;\r\n        this.setInputsInline(true);\r\n        this.setOutput(true);\r\n        this.setColour(\"#990099\");\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"not_operation\"] = function (block) {\r\n    let number2 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number2\",\r\n        Blockly.JavaScript.ORDER_LOGICAL_OR\r\n    );\r\n    let code = `! (${number2})`;\r\n    return [code, Blockly.JavaScript.ORDER_LOGICAL_OR];\r\n};","import Blockly from \"blockly\";\r\n\r\nBlockly.Blocks['if'] = {\r\n    init: function () {\r\n        this.appendDummyInput().appendField(\"if\");\r\n        this.setNextStatement(true);\r\n    }\r\n}\r\n\r\nBlockly.JavaScript['if'] = function (block) {\r\n    return 'if\\n';\r\n};\r\n\r\nBlockly.Blocks['else_if'] = {\r\n    init: function () {\r\n        this.appendDummyInput().appendField(\"else if\");\r\n        this.setNextStatement(true);\r\n        this.setPreviousStatement(true);\r\n    }\r\n}\r\n\r\nBlockly.JavaScript['else_if'] = function (block) {\r\n    return 'else_if\\n';\r\n};\r\n\r\nBlockly.Blocks['else'] = {\r\n    init: function () {\r\n        this.appendDummyInput().appendField(\"else\");\r\n        this.setPreviousStatement(true);\r\n    }\r\n}\r\n\r\nBlockly.JavaScript['else'] = function (block) {\r\n    return 'else\\n';\r\n};\r\n\r\nBlockly.Blocks[\"if_conditional\"] = {\r\n    init: function () {\r\n        this.itemCount_ = 1;\r\n        this.list_ = ['if'];\r\n        this.prevCount_ = 1;\r\n        this.updateShape_();\r\n        this.setMutator(new Blockly.Mutator(['if', 'else_if', 'else']))\r\n    },\r\n    mutationToDom: function () {\r\n        let container = Blockly.utils.xml.createElement('mutation');\r\n        container.setAttribute('itemCount', this.itemCount_);\r\n        container.setAttribute('prevCount', this.prevCount_);\r\n        container.setAttribute('list', JSON.stringify(this.list_));\r\n        return container;\r\n    },\r\n    domToMutation: function (xmlElement) {\r\n        this.itemCount_ = parseInt(xmlElement.getAttribute('itemCount'), 10);\r\n        this.prevCount_ = parseInt(xmlElement.getAttribute('prevCount'), 10);\r\n        this.list_ = JSON.parse(xmlElement.getAttribute('list'))\r\n        this.updateShape_();\r\n    },\r\n    decompose: function (workspace) {\r\n        // This is a special sub-block that only gets created in the mutator UI.\r\n        // It acts as our \"top block\"\r\n        let blocks = [];\r\n\r\n        blocks[0] = workspace.newBlock('if');\r\n        blocks[0].initSvg();\r\n        \r\n        for (let i = 1; i < this.itemCount_; i++) {\r\n            blocks[i] = workspace.newBlock(this.list_[i]);\r\n            blocks[i].initSvg();\r\n            blocks[i - 1].nextConnection.connect(blocks[i].previousConnection);\r\n        }\r\n\r\n        // And finally we have to return the top-block.\r\n        return blocks[0];\r\n    },\r\n    compose: function (topBlock) {\r\n\r\n        let code = Blockly.JavaScript.blockToCode(topBlock);\r\n        \r\n        const seg = code.split('\\n'); seg.pop();\r\n        \r\n        this.prevCount_ = this.itemCount_;\r\n        this.itemCount_ = seg.length;\r\n        this.list_ = seg;\r\n\r\n        this.updateShape_();\r\n    },\r\n    updateShape_: function () {\r\n        for (let i = 0; i < Math.max(this.prevCount_, this.itemCount_); i++) {\r\n            this.removeInput('statement_'+i, true);\r\n            this.removeInput('condition_'+i, true);\r\n        }\r\n        this.list_.forEach(((e, i) => {\r\n            if (e === 'if') {\r\n                this.appendValueInput(\"condition_\"+i)\r\n                    .setCheck(null)\r\n                    .appendField(\"if\");\r\n                this.appendStatementInput(\"statement_\"+i)\r\n                    .setCheck(null)\r\n                    .appendField(\"then\");\r\n            } else if (e === 'else_if') {\r\n                this.appendValueInput(\"condition_\"+i)\r\n                    .setCheck(null)\r\n                    .appendField(\"else if\");\r\n                this.appendStatementInput(\"statement_\"+i)\r\n                    .setCheck(null)\r\n                    .appendField(\"then\");\r\n            } else {\r\n                this.appendStatementInput(\"statement_\"+i)\r\n                    .setCheck(null)\r\n                    .appendField(\"else\");\r\n            }\r\n        }))\r\n        this.setPreviousStatement(true, null);\r\n        this.setNextStatement(true, null);\r\n        this.setColour(230);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"if_conditional\"] = function (block) {\r\n    let conditions = block.list_.map((e, i) => {\r\n        if (((e === 'if') || (e === 'else_if')) && block.getInput('condition_'+i)) {\r\n            return Blockly.JavaScript.valueToCode(\r\n                block,\r\n                \"condition_\"+i,\r\n                Blockly.JavaScript.ORDER_ATOMIC \r\n            );\r\n        } else {\r\n            return null;\r\n        }\r\n    });\r\n    let statements = block.list_.map((e, i) => {\r\n        return block.getInput('statement_'+i) ?\r\n             Blockly.JavaScript.statementToCode(block, \"statement_\"+i) : null;\r\n    });\r\n    let code = '';\r\n    block.list_.forEach((e, i) => {\r\n        if (e === 'if') {\r\n            code += `if (${conditions[i]}) {\\n${statements[i]}\\n} `\r\n        } else if (e === 'else_if') {\r\n            code += `else if (${conditions[i]}) {\\n${statements[i]}\\n} `\r\n        } else {\r\n            code += `else {\\n${statements[i]}}\\n`\r\n        }\r\n    })\r\n    return code;\r\n};\r\n","import Blockly from \"blockly\";\r\n \r\nBlockly.Blocks[\"loops_while\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"condition\")\r\n            .setCheck(Boolean)\r\n            .appendField(\"while \");\r\n        this.appendStatementInput(\"statement\")\r\n            .setCheck(null);\r\n        this.setInputsInline(true);\r\n        this.setPreviousStatement(true, null);\r\n        this.setNextStatement(true, null);\r\n        this.setColour(\"#ff3300\");\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"loops_while\"] = function (block) {\r\n    let cond = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"condition\",\r\n        Blockly.JavaScript.ORDER_ATOMIC \r\n    );\r\n    let stmt = Blockly.JavaScript.statementToCode(block, \"statement\")\r\n    let code = `while (${cond}) {\\n${stmt}}\\n`;\r\n    return code;\r\n};\r\n\r\n// Blockly.Blocks[\"loops_for\"] = {\r\n//     init: function () {\r\n//         this.appendDummyInput();\r\n//         this.appendValueInput(\"intial value\")\r\n//             .setCheck('Variable')\r\n//             .appendField(\"from \")\r\n//         this.appendValueInput(\"condition\")\r\n//             .setCheck(Boolean)\r\n//             .appendField(\" ; \")\r\n//         this.appendValueInput(\"update\")\r\n//             .setCheck(Number)\r\n//             .appendField(\" ; \")\r\n//         this.appendStatementInput(\"statement\")\r\n//             .setCheck(null)\r\n//         this.setInputsInline(true);\r\n//         this.setPreviousStatement(true, null);\r\n//         this.setNextStatement(true, null);\r\n//         this.setColour(\"#ff3300\");\r\n//     }\r\n// };\r\n\r\n// Blockly.JavaScript[\"loops_while\"] = function (block) {\r\n//     let cond = Blockly.JavaScript.valueToCode(\r\n//         block,\r\n//         \"condition\",\r\n//         Blockly.JavaScript.ORDER_ATOMIC \r\n//     );\r\n//     let stmt = Blockly.JavaScript.statementToCode(block, \"statement\")\r\n//     let code = `while (${cond}) {\\n${stmt}}\\n`;\r\n//     return code;\r\n// };\r\n\r\nBlockly.Blocks[\"loops_for\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"initial_value\")\r\n            .setCheck([Number,'Variable'])\r\n            .appendField(\"from \")\r\n        \r\n        this.appendValueInput(\"final_value\")\r\n            .setCheck([Number,'Variable'])\r\n            .appendField(\" to \")\r\n        this.appendStatementInput(\"statement\")\r\n            .setCheck(null)\r\n        this.setInputsInline(true);\r\n        this.setPreviousStatement(true, null);\r\n        this.setNextStatement(true, null);\r\n        this.setColour(\"#ff3300\");\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"loops_for\"] = function (block) {\r\n    let init_val = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"initial_value\",\r\n        Blockly.JavaScript.ORDER_ATOMIC \r\n    );\r\n    let final_val = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"final_value\",\r\n        Blockly.JavaScript.ORDER_ATOMIC \r\n    );\r\n    let stmt = Blockly.JavaScript.statementToCode(block, \"statement\");\r\n    let iter_var = 'USER_VAR_' + Math.random().toString(36).slice(2); \r\n    let code = `for (let ${iter_var} = ${init_val}; ${iter_var} < ${final_val}; ${iter_var}${init_val < final_val ? '++' : '--'}) {\\n${stmt}}\\n`;\r\n    return code;\r\n};","import Blockly from \"blockly\";\r\n\r\nconst delay = 250;\r\n\r\nBlockly.Blocks[\"move\"] = {\r\n    init: function () {\r\n        this.appendDummyInput()\r\n            .appendField(\"Move\")\r\n        this.appendValueInput(\"steps\")\r\n            .setCheck([Number, 'Variable'])\r\n        this.appendDummyInput()\r\n            .appendField(\"steps\")\r\n            .appendField(new Blockly.FieldDropdown([\r\n                ['in forward direction', 'f'],\r\n                ['in backward direction', 'b']\r\n            ]), 'dir');\r\n        this.setPreviousStatement(true, null);\r\n        this.setNextStatement(true, null);        \r\n        this.setInputsInline(true);\r\n        this.setColour(\"#00b377\");\r\n        this.setTooltip(\"\");\r\n        this.setHelpUrl(\"\");\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"move\"] = function (block) {\r\n    let steps = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"steps\",\r\n        Blockly.JavaScript.ORDER_ATOMIC \r\n    );\r\n    let dir = block.getFieldValue(\"dir\");\r\n    let code = `loadCanvasDrawing(context);draw(\"${dir === 'f' ? 'fd' : 'bk'} ${steps}\", context);saveCanvasDrawing(context, canvas);drawTurtle(context);await sleep(${delay});\\n`;\r\n    return code;\r\n};\r\n\r\nBlockly.Blocks[\"rotate\"] = {\r\n    init: function () {\r\n        this.appendDummyInput()\r\n            .appendField(\"Rotate\")\r\n        this.appendValueInput(\"degrees\")\r\n            .setCheck([Number, 'Variable'])\r\n        this.appendDummyInput()\r\n            .appendField(\"degrees\")\r\n            .appendField(new Blockly.FieldDropdown([\r\n                ['in left direction', 'l'],\r\n                ['in right direction', 'r']\r\n            ]), 'dir');\r\n        this.setPreviousStatement(true, null);\r\n        this.setNextStatement(true, null);\r\n        this.setInputsInline(true);\r\n        this.setColour(\"#00b377\");\r\n        this.setTooltip(\"\");\r\n        this.setHelpUrl(\"\");\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"rotate\"] = function (block) {\r\n    let degrees = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"degrees\",\r\n        Blockly.JavaScript.ORDER_ATOMIC \r\n    );\r\n    let dir = block.getFieldValue(\"dir\");\r\n    let code = `loadCanvasDrawing(context);draw(\"${dir === 'l' ? 'lt' : 'rt'} ${degrees}\", context);saveCanvasDrawing(context, canvas);drawTurtle(context);await sleep(${delay});\\n`;\r\n    return code;\r\n};\r\n\r\nBlockly.Blocks[\"set_position\"] = {\r\n    init: function () {\r\n        this.appendDummyInput()\r\n            .appendField(\"Translate: \");\r\n        \r\n        this.appendValueInput(\"x_dis\")\r\n            .setCheck(Number)\r\n            .appendField(\"x \")\r\n        \r\n        this.appendValueInput(\"y_dis\")\r\n            .setCheck(Number)\r\n            .appendField(\"y \");\r\n        \r\n        this.setInputsInline(true);\r\n        this.setPreviousStatement(true, null);\r\n        this.setNextStatement(true, null);\r\n        this.setColour(\"#00b377\");\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"set_position\"] = function (block) {\r\n    let x_dis = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"x_dis\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n\r\n    let y_dis = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"y_dis\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n     \r\n    let code = `context.translate(${x_dis}, ${y_dis});drawTurtle(context);`;\r\n    return code;\r\n};\r\n\r\nBlockly.Blocks['penup'] = {\r\n    init: function () {\r\n        this.appendDummyInput().appendField(\"Pen Up\");\r\n        this.setNextStatement(true);\r\n        this.setPreviousStatement(true);\r\n        this.setColour(\"#00b377\");\r\n    }\r\n}\r\n\r\nBlockly.JavaScript['penup'] = function (block) {\r\n    return 'penup(context);\\n';\r\n};\r\n\r\nBlockly.Blocks['pendown'] = {\r\n    init: function () {\r\n        this.appendDummyInput().appendField(\"Pen Down\");\r\n        this.setNextStatement(true);\r\n        this.setPreviousStatement(true);\r\n        this.setColour(\"#00b377\");\r\n    }\r\n}\r\n\r\nBlockly.JavaScript['pendown'] = function (block) {\r\n    return 'pendown(context);\\n';\r\n};\r\n","import Blockly from \"blockly\";\r\n\r\nBlockly.Blocks[\"square\"] = {\r\n    init: function () {\r\n        this.appendDummyInput()\r\n            .appendField(\"Draw Square \");\r\n        this.appendValueInput(\"side_length\")\r\n            .setCheck(Number)\r\n            .appendField(\"Side Length \")\r\n        this.appendValueInput(\"x_dis\")\r\n            .setCheck(Number)\r\n            .appendField(\"x dispalcement \")\r\n        this.appendValueInput(\"y_dis\")\r\n            .setCheck(Number)\r\n            .appendField(\"y dispalcement \");\r\n        this.setPreviousStatement(true, null);\r\n        this.setNextStatement(true, null);\r\n        this.setColour(\"#ff6699\");\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"square\"] = function (block) {\r\n    let side_length = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"side_length\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n     \r\n    let x_dis = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"x_dis\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n\r\n    let y_dis = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"y_dis\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n\r\n    let code = `\r\n        loadCanvasDrawing(context);\r\n        context.translate(${x_dis}, ${y_dis});\r\n        for (let USER_VAR_SQUARE_LOOP = 0; USER_VAR_SQUARE_LOOP < 4; USER_VAR_SQUARE_LOOP++) {\r\n            draw(\"fd ${side_length}\", context);\r\n            draw(\"lt 90\", context);\r\n        }\r\n        context.translate(${-1 * x_dis}, ${-1 * y_dis});\r\n        saveCanvasDrawing(context, canvas);drawTurtle(context);\r\n    `;\r\n    return code;\r\n};\r\n\r\nBlockly.Blocks[\"rectangle\"] = {\r\n    init: function () {\r\n        this.appendDummyInput()\r\n            .appendField(\"Draw Rectangle \");\r\n\r\n        this.appendValueInput(\"length\")\r\n            .setCheck(Number)\r\n            .appendField(\"Length \")\r\n        \r\n        this.appendValueInput(\"breadth\")\r\n            .setCheck(Number)\r\n            .appendField(\"Breadth \")\r\n        \r\n        this.appendValueInput(\"x_dis\")\r\n            .setCheck(Number)\r\n            .appendField(\"x dispalcement \")\r\n        \r\n        this.appendValueInput(\"y_dis\")\r\n            .setCheck(Number)\r\n            .appendField(\"y dispalcement \");\r\n        this.setPreviousStatement(true, null);\r\n        this.setNextStatement(true, null);\r\n        this.setColour(\"#ff6699\");\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"rectangle\"] = function (block) {\r\n    let length = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"length\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n\r\n    let breadth = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"breadth\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n\r\n    let x_dis = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"x_dis\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n\r\n    let y_dis = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"y_dis\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n\r\n    let code = `\r\n        loadCanvasDrawing(context);\r\n        context.translate(${x_dis}, ${y_dis});\r\n        for (let USER_VAR_SQUARE_LOOP = 0; USER_VAR_SQUARE_LOOP < 4; USER_VAR_SQUARE_LOOP++) {\r\n            if (USER_VAR_SQUARE_LOOP % 2 === 0) draw(\"fd ${length}\", context);\r\n            else draw(\"fd ${breadth}\", context);\r\n            draw(\"lt 90\", context);\r\n        }\r\n        context.translate(${-1 * x_dis}, ${-1 * y_dis});\r\n        saveCanvasDrawing(context, canvas);drawTurtle(context);\r\n    `;\r\n    return code;\r\n};\r\n\r\n\r\nBlockly.Blocks[\"circle\"] = {\r\n    init: function () {\r\n        this.appendDummyInput()\r\n            .appendField(\"Draw Circle \");\r\n\r\n        this.appendValueInput(\"radius\")\r\n            .setCheck(Number)\r\n            .appendField(\"Radius \")\r\n        \r\n        this.appendValueInput(\"x_dis\")\r\n            .setCheck(Number)\r\n            .appendField(\"x dispalcement \")\r\n        \r\n        this.appendValueInput(\"y_dis\")\r\n            .setCheck(Number)\r\n            .appendField(\"y dispalcement \");\r\n        this.setPreviousStatement(true, null);\r\n        this.setNextStatement(true, null);\r\n        this.setColour(\"#ff6699\");\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"circle\"] = function (block) {\r\n    let radius = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"radius\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n\r\n    let x_dis = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"x_dis\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n\r\n    let y_dis = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"y_dis\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n\r\n    let code = `\r\n        loadCanvasDrawing(context);\r\n        context.beginPath();\r\n        context.arc(${x_dis}, ${y_dis}, ${radius}, 0, 2 * Math.PI);\r\n        context.stroke();\r\n        saveCanvasDrawing(context, canvas);drawTurtle(context);\r\n    `;\r\n    return code;\r\n};\r\n\r\n","import React from 'react';\r\n\r\nimport ReactBlockly from \"react-blockly\";\r\nimport Blockly from \"blockly\";\r\nimport * as fs from \"browserify-fs\";\r\n\r\nimport \"./customBlocks/expressions\";\r\nimport \"./customBlocks/operations\";\r\nimport \"./customBlocks/variables\";\r\nimport \"./customBlocks/logic\"\r\nimport \"./customBlocks/conditionals\";\r\nimport \"./customBlocks/loops\";\r\nimport \"./customBlocks/movement\";\r\nimport \"./customBlocks/shapes\";\r\n\r\nconst BlocklyApp = () => {\r\n    const initialXml =\r\n        '<xml xmlns=\"https://developers.google.com/blockly/xml\"></xml>';\r\n\r\n    const toolboxCategories = [\r\n        {\r\n            name: \"Variables\",\r\n            colour: \"#cc7a00\",\r\n            blocks: [\r\n                {\r\n                    type: \"variable_set\"\r\n                },\r\n                {\r\n                    type: \"variable_modify\"\r\n                },\r\n                {\r\n                    type: \"variable_get\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            name: \"Expressions\",\r\n            colour: \"#66cc00\",\r\n            blocks: [\r\n                {\r\n                    type: \"text_expression\"\r\n                },\r\n                {\r\n                    type: \"number_expression\"\r\n                },\r\n                {\r\n                    type: \"boolean_expression\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            name: \"Operations\",\r\n            colour: \"#33cccc\",\r\n            blocks: [\r\n                {\r\n                    type: \"add_operation\"\r\n                },\r\n                {\r\n                    type: \"sub_operation\"\r\n                },\r\n                {\r\n                    type: \"mul_operation\"\r\n                },\r\n                {\r\n                    type: \"div_operation\"\r\n                },\r\n                {\r\n                    type: \"mod_operation\"\r\n                },\r\n                {\r\n                    type: \"inc_operation\"\r\n                },\r\n                {\r\n                    type: \"dec_operation\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            name: \"Logic\",\r\n            colour: \"#990099\",\r\n            blocks: [\r\n                {\r\n                    type: \"equals_logic\"\r\n                },\r\n                {\r\n                    type: \"not_equals_logic\"\r\n                },\r\n                {\r\n                    type: \"less_than_logic\"\r\n                },\r\n                {\r\n                    type: \"greater_than_logic\"\r\n                },\r\n                {\r\n                    type: \"less_than_equals_logic\"\r\n                },\r\n                {\r\n                    type: \"greater_than_equals_logic\"\r\n                },\r\n                {\r\n                    type: \"and_operation\"\r\n                },\r\n                {\r\n                    type: \"or_operation\"\r\n                },\r\n                {\r\n                    type: \"not_operation\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            name: \"Control\",\r\n            colour: \"#ff3300\",\r\n            blocks: [\r\n                {\r\n                    type: \"if_conditional\"\r\n                },\r\n                {\r\n                    type: \"loops_while\"\r\n                },\r\n                {\r\n                    type: \"loops_for\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            name: \"Motion\",\r\n            colour: \"#00b377\",\r\n            blocks: [\r\n                {\r\n                    type: \"move\"\r\n                },\r\n                {\r\n                    type: \"rotate\"\r\n                },\r\n                {\r\n                    type : \"set_position\"\r\n                },\r\n                {\r\n                    type : \"penup\"\r\n                },\r\n                {\r\n                    type : \"pendown\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            name: \"Shapes\",\r\n            colour: \"ff6699\",\r\n            blocks: [\r\n                {\r\n                    type : \"square\"\r\n                },\r\n                {\r\n                    type : \"rectangle\"\r\n                },\r\n                {\r\n                    type: \"circle\"\r\n                }\r\n            ]\r\n        }\r\n    ];\r\n\r\n    function workspaceDidChange(workspace) {\r\n        const topBlocks = workspace.getTopBlocks(true);\r\n        let valid = true;\r\n        topBlocks.forEach(e => {\r\n            valid = valid & (e.allInputsFilled())\r\n        })\r\n        let code = null;\r\n        if (valid) {\r\n            code = 'async function USER_BLOCK_FN() {\\n' + Blockly.JavaScript.workspaceToCode(workspace) + '\\n}\\nUSER_BLOCK_FN();';\r\n            if (code.includes('let  =')) {\r\n                code = 'Ensure all the blocks and statements are filled'\r\n            }\r\n        } else {\r\n            code = 'Ensure all the blocks and statements are filled'\r\n        }\r\n        fs.writeFile(\"./bot.js\", code);\r\n        if (document.getElementById(\"code\")) document.getElementById(\"code\").value = code;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ReactBlockly\r\n                toolboxCategories={toolboxCategories}\r\n                initialXml={initialXml}\r\n                wrapperDivClassName=\"fill-height\"\r\n                workspaceConfiguration={{\r\n                    grid: {\r\n                        spacing: 20,\r\n                        length: 3,\r\n                        colour: \"#ccc\",\r\n                        snap: true\r\n                    }\r\n                }}\r\n                workspaceDidChange={workspaceDidChange}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default BlocklyApp;\r\n","import \"./App.css\";\nimport React from \"react\";\nimport { Button, Row, Col, Input, Typography } from \"antd\";\nimport BlocklyApp from \"./BlocklyApp\";\nimport DrawCanvas from \"./DrawCanvas\";\nconst { TextArea } = Input;\n\nexport default function App() {\n    const [command, setCommand] = React.useState('');\n\n    React.useEffect(() => {\n        setCommand('drawTurtle(context);');\n    }, [])\n\n    return (\n        <>\n            <Row>\n                <Col span={14}>\n                    <BlocklyApp />\n                </Col>\n                <Col span={10}>\n                    <Button onClick={() => setCommand(document.getElementById(\"code\").value)}>Run</Button>\n                    <Button onClick={() => setCommand('async function USER_BLOCK_FN() {drawTurtle(context);}\\nUSER_BLOCK_FN();')}>Reset</Button>\n                    <DrawCanvas command={command} width=\"625\" height=\"600\" style={{border: '1px solid black'}} />\n                </Col>\n            </Row>\n        \n            <Row>\n                <Col span={24}>\n                    <Typography>JavaScript Code:</Typography>\n                    <Button onClick={() => setCommand(document.getElementById(\"code\").value)}>Run</Button>\n                    <Button onClick={() => setCommand('async function USER_BLOCK_FN() {drawTurtle();}\\nUSER_BLOCK_FN();')}>Reset</Button>\n                    <TextArea \n                        id=\"code\"\n                        style={{height: '400px', width: '100%'}}\n                        value=\"\"\n                    />\n                </Col>\n                \n            </Row>\n        </>\n    );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}