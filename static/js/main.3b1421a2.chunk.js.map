{"version":3,"sources":["DrawCanvas.js","customBlocks/expressions.js","customBlocks/operations.js","customBlocks/variables.js","customBlocks/logic.js","customBlocks/conditionals.js","customBlocks/loops.js","customBlocks/movement.js","BlocklyApp.js","App.js","reportWebVitals.js","index.js"],"names":["DrawCanvas","props","canvasRef","React","useRef","command","resetFn","rest","useEffect","includes","window","confirm","canvas","current","context","getContext","restore","clearRect","width","height","save","translate","eval","e","SyntaxError","alert","message","parseCmd","split","dir","value","angle","resultDir","Number","toUpperCase","deg2Rad","deg","Math","PI","drawTurtle","ctx","beginPath","moveTo","lineTo","closePath","stroke","draw","console","log","rotate","ref","Blockly","Blocks","init","this","appendDummyInput","appendField","FieldTextInput","setOutput","String","setColour","JavaScript","block","variableName","getFieldValue","ORDER_ATOMIC","FieldNumber","FieldDropdown","appendValueInput","setCheck","setInputsInline","number1","valueToCode","ORDER_ADDITION","number2","setNextStatement","setPreviousStatement","variableValue","Boolean","ORDER_EQUALITY","ORDER_RELATIONAL","itemCount_","list_","prevCount_","updateShape_","setMutator","Mutator","mutationToDom","container","utils","xml","createElement","setAttribute","JSON","stringify","domToMutation","xmlElement","parseInt","getAttribute","parse","decompose","workspace","blocks","newBlock","initSvg","i","nextConnection","connect","previousConnection","compose","topBlock","seg","blockToCode","pop","length","max","removeInput","forEach","appendStatementInput","conditions","map","getInput","statements","statementToCode","code","cond","stmt","setTooltip","setHelpUrl","steps","degrees","BlocklyApp","toolboxCategories","name","colour","type","initialXml","wrapperDivClassName","workspaceConfiguration","grid","spacing","snap","workspaceDidChange","topBlocks","getTopBlocks","valid","allInputsFilled","workspaceToCode","fs","document","getElementById","TextArea","Input","App","useState","setCommand","span","onClick","style","border","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.3b1421a2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst DrawCanvas = props => {\r\n    const canvasRef = React.useRef(null);\r\n    let { command, resetFn, ...rest} = props;\r\n\r\n    React.useEffect(() => {\r\n        if (command.includes('while')) {\r\n            if (!window.confirm('Are you sure all while loops are terminating?')) {\r\n                command = 'Ensure all the blocks and statements are filled'\r\n            }\r\n        }\r\n        if (command === 'Ensure all the blocks and statements are filled') {}\r\n        else {\r\n            const canvas = canvasRef.current;\r\n            const context = canvas.getContext('2d');\r\n            context.restore();\r\n            context.clearRect(0, 0, canvas.width, canvas.height);\r\n            context.save();\r\n            context.translate(canvas.width / 2, canvas.height / 2);\r\n            try {\r\n                eval(command); \r\n            } catch (e) {\r\n                if (e instanceof SyntaxError) {\r\n                    alert(e.message);\r\n                } else { \r\n                    alert(e)\r\n                }\r\n            }\r\n        }\r\n    }, [command]);\r\n\r\n    const parseCmd = command => {\r\n        let [dir, value] = command.split(\" \")\r\n        let angle = 0\r\n        let resultDir = \"\"\r\n        value = Number(value)\r\n        switch (dir.toUpperCase()) {\r\n            case \"FD\":\r\n                resultDir = \"FORWARD\"\r\n                break\r\n            case \"BK\":\r\n                resultDir = \"BACKWARD\"\r\n                angle = 180\r\n                break\r\n            case \"LT\":\r\n                resultDir = \"LEFT\"\r\n                angle = -value\r\n                break\r\n            case \"RT\":\r\n                resultDir = \"RIGHT\"\r\n                angle = value\r\n                break\r\n        }\r\n        return {\r\n            dir: resultDir,\r\n            value,\r\n            angle: deg2Rad(angle),\r\n        }\r\n    }\r\n\r\n    const deg2Rad = deg => {\r\n        return (deg * Math.PI) / 180\r\n    }\r\n\r\n    const drawTurtle = ctx => {\r\n        ctx.beginPath()\r\n        ctx.moveTo(-7, -7)\r\n        ctx.lineTo(0, 7)\r\n        ctx.lineTo(7, -7)\r\n        ctx.closePath()\r\n        ctx.stroke()\r\n    }\r\n\r\n    const draw = (command, ctx) => {\r\n        const { dir, angle, value } = parseCmd(command)\r\n        console.log(dir, angle, value)\r\n        ctx.rotate(angle)\r\n        if (dir === \"FORWARD\" || dir === \"BACKWARD\") {\r\n            ctx.beginPath()\r\n            ctx.moveTo(0, 0)\r\n            ctx.lineTo(0, value)\r\n            ctx.translate(0, value)\r\n            ctx.closePath()\r\n            ctx.stroke()\r\n        }\r\n    }\r\n\r\n    return <canvas ref={canvasRef} {...rest} />\r\n}\r\n\r\nexport default DrawCanvas;","import Blockly from \"blockly\";\r\n\r\nBlockly.Blocks[\"text_expression\"] = {\r\n    init: function () {\r\n        this.appendDummyInput()\r\n            .appendField(\"String: \")\r\n            .appendField(new Blockly.FieldTextInput(\"\"), \"value\");\r\n        this.setOutput(true, String);\r\n        this.setColour(105);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"text_expression\"] = function (block) {\r\n    let variableName = block.getFieldValue(\"value\");\r\n    var code = `\"${variableName}\"`;\r\n    return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n};\r\n\r\nBlockly.Blocks[\"number_expression\"] = {\r\n    init: function () {\r\n        this.appendDummyInput()\r\n            .appendField(\"Number: \")\r\n            .appendField(new Blockly.FieldNumber(0), \"value\");\r\n        this.setOutput(true, Number);\r\n        this.setColour(105);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"number_expression\"] = function (block) {\r\n    let variableName = block.getFieldValue(\"value\");\r\n    var code = `${variableName}`;\r\n    return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n};\r\n\r\nBlockly.Blocks[\"boolean_expression\"] = {\r\n    init: function () {\r\n        this.appendDummyInput()\r\n            .appendField(\"Boolean: \")\r\n            .appendField(new Blockly.FieldDropdown([\r\n                ['true', 'true'],\r\n                ['false', 'false']\r\n            ]), \"value\");\r\n        this.setOutput(true);\r\n        this.setColour(105);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"boolean_expression\"] = function (block) {\r\n    let variableName = block.getFieldValue(\"value\");\r\n    var code = `${variableName}`;\r\n    return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n};","import Blockly from \"blockly\";\r\n\r\nBlockly.Blocks[\"add_operation\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"number1\")\r\n            .setCheck(Number)\r\n            .appendField(\"Add \")\r\n        this.appendValueInput(\"number2\")\r\n            .setCheck(Number)\r\n            .appendField(\" with \");;\r\n        this.setInputsInline(true);\r\n        this.setOutput(true);\r\n        this.setColour(105);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"add_operation\"] = function (block) {\r\n    let number1 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number1\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    let number2 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number2\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    var code = `${number1} + ${number2}`;\r\n    return [code, Blockly.JavaScript.ORDER_ADDITION];\r\n};\r\n\r\nBlockly.Blocks[\"sub_operation\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"number1\")\r\n            .setCheck(Number)\r\n            .appendField(\"Subtract \")\r\n        this.appendValueInput(\"number2\")\r\n            .setCheck(Number)\r\n            .appendField(\" with \");;\r\n        this.setInputsInline(true);\r\n        this.setOutput(true);\r\n        this.setColour(105);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"sub_operation\"] = function (block) {\r\n    let number1 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number1\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    let number2 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number2\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    var code = `${number1} - ${number2}`;\r\n    return [code, Blockly.JavaScript.ORDER_ADDITION];\r\n};\r\n\r\nBlockly.Blocks[\"mul_operation\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"number1\")\r\n            .setCheck(Number)\r\n            .appendField(\"Multiply \")\r\n        this.appendValueInput(\"number2\")\r\n            .setCheck(Number)\r\n            .appendField(\" with \");;\r\n        this.setInputsInline(true);\r\n        this.setOutput(true);\r\n        this.setColour(105);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"mul_operation\"] = function (block) {\r\n    let number1 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number1\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    let number2 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number2\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    var code = `${number1} * ${number2}`;\r\n    return [code, Blockly.JavaScript.ORDER_ADDITION];\r\n};\r\n\r\nBlockly.Blocks[\"div_operation\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"number1\")\r\n            .setCheck(Number)\r\n            .appendField(\"Divide \")\r\n        this.appendValueInput(\"number2\")\r\n            .setCheck(Number)\r\n            .appendField(\" with \");;\r\n        this.setInputsInline(true);\r\n        this.setOutput(true);\r\n        this.setColour(105);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"div_operation\"] = function (block) {\r\n    let number1 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number1\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    let number2 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number2\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    var code = `${number1} / ${number2}`;\r\n    return [code, Blockly.JavaScript.ORDER_ADDITION];\r\n};\r\n\r\nBlockly.Blocks[\"mod_operation\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"number1\")\r\n            .setCheck(Number)\r\n            .appendField(\"Modulo of \")\r\n        this.appendValueInput(\"number2\")\r\n            .setCheck(Number)\r\n            .appendField(\" with \");;\r\n        this.setInputsInline(true);\r\n        this.setOutput(true);\r\n        this.setColour(105);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"mod_operation\"] = function (block) {\r\n    let number1 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number1\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    let number2 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number2\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    var code = `${number1} % ${number2}`;\r\n    return [code, Blockly.JavaScript.ORDER_ADDITION];\r\n};\r\n\r\nBlockly.Blocks[\"inc_operation\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"number1\")\r\n            .setCheck(Number)\r\n            .appendField(\"Increment \");\r\n        this.setInputsInline(true);\r\n        this.setOutput(true);\r\n        this.setColour(105);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"inc_operation\"] = function (block) {\r\n    let number1 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number1\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    var code = `${number1} + 1`;\r\n    return [code, Blockly.JavaScript.ORDER_ADDITION];\r\n};\r\n","import Blockly from \"blockly\";\r\n\r\nBlockly.Blocks[\"variable_set\"] = {\r\n    init: function () {\r\n        this.appendDummyInput()\r\n            .appendField(\"define \")\r\n            .appendField(new Blockly.FieldTextInput(\"\"), \"variableName\")\r\n            .appendField(\" as \");\r\n        this.appendValueInput(\"variableValue\")\r\n            .setCheck(null);\r\n        this.setInputsInline(true);\r\n        this.setNextStatement(true);\r\n        this.setPreviousStatement(true);\r\n        this.setColour(105);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"variable_set\"] = function (block) {\r\n    let variableName = block.getFieldValue(\"variableName\");\r\n    let variableValue = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"variableValue\",\r\n        Blockly.JavaScript.ORDER_ATOMIC\r\n    )\r\n    let code = `let USER_VAR_${variableName} = ${variableValue};\\n`;\r\n    return code;\r\n};\r\n\r\nBlockly.Blocks[\"variable_modify\"] = {\r\n    init: function () {\r\n        this.appendDummyInput()\r\n            .appendField(\"modify \")\r\n            .appendField(new Blockly.FieldTextInput(\"\"), \"variableName\")\r\n            .appendField(\" to \");\r\n        this.appendValueInput(\"variableValue\")\r\n            .setCheck(null);\r\n        this.setColour(105);        \r\n        this.setInputsInline(true);\r\n        this.setNextStatement(true);\r\n        this.setPreviousStatement(true);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"variable_modify\"] = function (block) {\r\n    let variableName = block.getFieldValue(\"variableName\");\r\n    let variableValue = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"variableValue\",\r\n        Blockly.JavaScript.ORDER_ATOMIC\r\n    );\r\n    let code = `USER_VAR_${variableName} = ${variableValue};\\n`;\r\n    return code;\r\n};\r\n\r\nBlockly.Blocks[\"variable_get\"] = {\r\n    init: function () {\r\n        this.appendDummyInput()\r\n            .appendField(new Blockly.FieldTextInput(\"\"), \"value\");\r\n        this.setOutput(true);\r\n        this.setColour(105);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"variable_get\"] = function (block) {\r\n    let variableName = block.getFieldValue(\"value\");\r\n    var code = `USER_VAR_${variableName}`;\r\n    return [code, Blockly.JavaScript.ORDER_ATOMIC];\r\n};","import Blockly from \"blockly\";\r\n\r\nBlockly.Blocks[\"equals_logic\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"number1\")\r\n            .setCheck(Number)\r\n        this.appendValueInput(\"number2\")\r\n            .setCheck(Number)\r\n            .appendField(\" = \");;\r\n        this.setInputsInline(true);\r\n        this.setOutput(true, Boolean);\r\n        this.setColour(105);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"equals_logic\"] = function (block) {\r\n    let number1 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number1\",\r\n        Blockly.JavaScript.ORDER_EQUALITY \r\n    );\r\n    let number2 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number2\",\r\n        Blockly.JavaScript.ORDER_EQUALITY \r\n    );\r\n    var code = `${number1} === ${number2}`;\r\n    return [code, Blockly.JavaScript.ORDER_EQUALITY];\r\n};\r\n\r\nBlockly.Blocks[\"not_equals_logic\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"number1\")\r\n            .setCheck(Number)\r\n        this.appendValueInput(\"number2\")\r\n            .setCheck(Number)\r\n            .appendField(\" != \");;\r\n        this.setInputsInline(true);\r\n        this.setOutput(true, Boolean);\r\n        this.setColour(105);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"not_equals_logic\"] = function (block) {\r\n    let number1 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number1\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    let number2 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number2\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    var code = `${number1} !== ${number2}`;\r\n    return [code, Blockly.JavaScript.ORDER_EQUALITY];\r\n};\r\n\r\nBlockly.Blocks[\"less_than_logic\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"number1\")\r\n            .setCheck(Number)\r\n        this.appendValueInput(\"number2\")\r\n            .setCheck(Number)\r\n            .appendField(\" < \");;\r\n        this.setInputsInline(true);\r\n        this.setOutput(true, Boolean);\r\n        this.setColour(105);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"less_than_logic\"] = function (block) {\r\n    let number1 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number1\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    let number2 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number2\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    var code = `${number1} < ${number2}`;\r\n    return [code, Blockly.JavaScript.ORDER_RELATIONAL];\r\n};\r\n\r\nBlockly.Blocks[\"greater_than_logic\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"number1\")\r\n            .setCheck(Number)\r\n        this.appendValueInput(\"number2\")\r\n            .setCheck(Number)\r\n            .appendField(\" > \");;\r\n        this.setInputsInline(true);\r\n        this.setOutput(true, Boolean);\r\n        this.setColour(105);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"greater_than_logic\"] = function (block) {\r\n    let number1 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number1\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    let number2 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number2\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    var code = `${number1} > ${number2}`;\r\n    return [code, Blockly.JavaScript.ORDER_RELATIONAL];\r\n};\r\n\r\nBlockly.Blocks[\"less_than_equals_logic\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"number1\")\r\n            .setCheck(Number)\r\n        this.appendValueInput(\"number2\")\r\n            .setCheck(Number)\r\n            .appendField(\" <= \");;\r\n        this.setInputsInline(true);\r\n        this.setOutput(true, Boolean);\r\n        this.setColour(105);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"less_than_equals_logic\"] = function (block) {\r\n    let number1 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number1\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    let number2 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number2\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    var code = `${number1} <= ${number2}`;\r\n    return [code, Blockly.JavaScript.ORDER_RELATIONAL];\r\n};\r\n\r\nBlockly.Blocks[\"greater_than_equals_logic\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"number1\")\r\n            .setCheck(Number)\r\n        this.appendValueInput(\"number2\")\r\n            .setCheck(Number)\r\n            .appendField(\" >= \");;\r\n        this.setInputsInline(true);\r\n        this.setOutput(true, Boolean);\r\n        this.setColour(105);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"greater_than_equals_logic\"] = function (block) {\r\n    let number1 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number1\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    let number2 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number2\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    var code = `${number1} >= ${number2}`;\r\n    return [code, Blockly.JavaScript.ORDER_RELATIONAL];\r\n};\r\n\r\nBlockly.Blocks[\"mul_operation\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"number1\")\r\n            .setCheck(Number)\r\n            .appendField(\"Multiply \")\r\n        this.appendValueInput(\"number2\")\r\n            .setCheck(Number)\r\n            .appendField(\" with \");;\r\n        this.setInputsInline(true);\r\n        this.setOutput(true);\r\n        this.setColour(105);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"mul_operation\"] = function (block) {\r\n    let number1 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number1\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    let number2 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number2\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    var code = `${number1} * ${number2}`;\r\n    return [code, Blockly.JavaScript.ORDER_ADDITION];\r\n};\r\n\r\nBlockly.Blocks[\"div_operation\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"number1\")\r\n            .setCheck(Number)\r\n            .appendField(\"Divide \")\r\n        this.appendValueInput(\"number2\")\r\n            .setCheck(Number)\r\n            .appendField(\" with \");;\r\n        this.setInputsInline(true);\r\n        this.setOutput(true);\r\n        this.setColour(105);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"div_operation\"] = function (block) {\r\n    let number1 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number1\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    let number2 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number2\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    var code = `${number1} / ${number2}`;\r\n    return [code, Blockly.JavaScript.ORDER_ADDITION];\r\n};\r\n\r\nBlockly.Blocks[\"mod_operation\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"number1\")\r\n            .setCheck(Number)\r\n            .appendField(\"Modulo of \")\r\n        this.appendValueInput(\"number2\")\r\n            .setCheck(Number)\r\n            .appendField(\" with \");;\r\n        this.setInputsInline(true);\r\n        this.setOutput(true);\r\n        this.setColour(105);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"mod_operation\"] = function (block) {\r\n    let number1 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number1\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    let number2 = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"number2\",\r\n        Blockly.JavaScript.ORDER_ADDITION \r\n    );\r\n    var code = `${number1} % ${number2}`;\r\n    return [code, Blockly.JavaScript.ORDER_ADDITION];\r\n};\r\n","import Blockly from \"blockly\";\r\n\r\nBlockly.Blocks['if'] = {\r\n    init: function () {\r\n        this.appendDummyInput().appendField(\"if\");\r\n        this.setNextStatement(true);\r\n    }\r\n}\r\n\r\nBlockly.JavaScript['if'] = function (block) {\r\n    return 'if\\n';\r\n};\r\n\r\nBlockly.Blocks['else_if'] = {\r\n    init: function () {\r\n        this.appendDummyInput().appendField(\"else if\");\r\n        this.setNextStatement(true);\r\n        this.setPreviousStatement(true);\r\n    }\r\n}\r\n\r\nBlockly.JavaScript['else_if'] = function (block) {\r\n    return 'else_if\\n';\r\n};\r\n\r\nBlockly.Blocks['else'] = {\r\n    init: function () {\r\n        this.appendDummyInput().appendField(\"else\");\r\n        this.setPreviousStatement(true);\r\n    }\r\n}\r\n\r\nBlockly.JavaScript['else'] = function (block) {\r\n    return 'else\\n';\r\n};\r\n\r\nBlockly.Blocks[\"if_conditional\"] = {\r\n    init: function () {\r\n        this.itemCount_ = 1;\r\n        this.list_ = ['if'];\r\n        this.prevCount_ = 1;\r\n        this.updateShape_();\r\n        this.setMutator(new Blockly.Mutator(['if', 'else_if', 'else']))\r\n    },\r\n    mutationToDom: function () {\r\n        let container = Blockly.utils.xml.createElement('mutation');\r\n        container.setAttribute('itemCount', this.itemCount_);\r\n        container.setAttribute('prevCount', this.prevCount_);\r\n        container.setAttribute('list', JSON.stringify(this.list_));\r\n        return container;\r\n    },\r\n    domToMutation: function (xmlElement) {\r\n        this.itemCount_ = parseInt(xmlElement.getAttribute('itemCount'), 10);\r\n        this.prevCount_ = parseInt(xmlElement.getAttribute('prevCount'), 10);\r\n        this.list_ = JSON.parse(xmlElement.getAttribute('list'))\r\n        this.updateShape_();\r\n    },\r\n    decompose: function (workspace) {\r\n        // This is a special sub-block that only gets created in the mutator UI.\r\n        // It acts as our \"top block\"\r\n        let blocks = [];\r\n\r\n        blocks[0] = workspace.newBlock('if');\r\n        blocks[0].initSvg();\r\n        \r\n        for (let i = 1; i < this.itemCount_; i++) {\r\n            blocks[i] = workspace.newBlock(this.list_[i]);\r\n            blocks[i].initSvg();\r\n            blocks[i - 1].nextConnection.connect(blocks[i].previousConnection);\r\n        }\r\n\r\n        // And finally we have to return the top-block.\r\n        return blocks[0];\r\n    },\r\n    compose: function (topBlock) {\r\n\r\n        let code = Blockly.JavaScript.blockToCode(topBlock);\r\n        \r\n        const seg = code.split('\\n'); seg.pop();\r\n        \r\n        this.prevCount_ = this.itemCount_;\r\n        this.itemCount_ = seg.length;\r\n        this.list_ = seg;\r\n\r\n        this.updateShape_();\r\n    },\r\n    updateShape_: function () {\r\n        for (let i = 0; i < Math.max(this.prevCount_, this.itemCount_); i++) {\r\n            this.removeInput('statement_'+i, true);\r\n            this.removeInput('condition_'+i, true);\r\n        }\r\n        this.list_.forEach(((e, i) => {\r\n            if (e === 'if') {\r\n                this.appendValueInput(\"condition_\"+i)\r\n                    .setCheck(null)\r\n                    .appendField(\"if\");\r\n                this.appendStatementInput(\"statement_\"+i)\r\n                    .setCheck(null)\r\n                    .appendField(\"then\");\r\n            } else if (e === 'else_if') {\r\n                this.appendValueInput(\"condition_\"+i)\r\n                    .setCheck(null)\r\n                    .appendField(\"else if\");\r\n                this.appendStatementInput(\"statement_\"+i)\r\n                    .setCheck(null)\r\n                    .appendField(\"then\");\r\n            } else {\r\n                this.appendStatementInput(\"statement_\"+i)\r\n                    .setCheck(null)\r\n                    .appendField(\"else\");\r\n            }\r\n        }))\r\n        this.setPreviousStatement(true, null);\r\n        this.setNextStatement(true, null);\r\n        this.setColour(230);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"if_conditional\"] = function (block) {\r\n    let conditions = block.list_.map((e, i) => {\r\n        if (((e === 'if') || (e === 'else_if')) && block.getInput('condition_'+i)) {\r\n            return Blockly.JavaScript.valueToCode(\r\n                block,\r\n                \"condition_\"+i,\r\n                Blockly.JavaScript.ORDER_ATOMIC \r\n            );\r\n        } else {\r\n            return null;\r\n        }\r\n    });\r\n    let statements = block.list_.map((e, i) => {\r\n        return block.getInput('statement_'+i) ?\r\n             Blockly.JavaScript.statementToCode(block, \"statement_\"+i) : null;\r\n    });\r\n    let code = '';\r\n    block.list_.forEach((e, i) => {\r\n        if (e === 'if') {\r\n            code += `if (${conditions[i]}) {\\n${statements[i]}\\n} `\r\n        } else if (e === 'else_if') {\r\n            code += `else if (${conditions[i]}) {\\n${statements[i]}\\n} `\r\n        } else {\r\n            code += `else {\\n${statements[i]}}\\n`\r\n        }\r\n    })\r\n    return code;\r\n};\r\n","import Blockly from \"blockly\";\r\n\r\nBlockly.Blocks[\"loops_while\"] = {\r\n    init: function () {\r\n        this.appendDummyInput();\r\n        this.appendValueInput(\"condition\")\r\n            .setCheck(Boolean)\r\n            .appendField(\"while \");\r\n        this.appendStatementInput(\"statement\")\r\n            .setCheck(null);\r\n        this.setInputsInline(true);\r\n        this.setPreviousStatement(true, null);\r\n        this.setNextStatement(true, null);\r\n        this.setColour(105);\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"loops_while\"] = function (block) {\r\n    let cond = Blockly.JavaScript.valueToCode(\r\n        block,\r\n        \"condition\",\r\n        Blockly.JavaScript.ORDER_ATOMIC \r\n    );\r\n    let stmt = Blockly.JavaScript.statementToCode(block, \"statement\")\r\n    let code = `while (${cond}) {\\n${stmt}}\\n`;\r\n    return code;\r\n};","import Blockly from \"blockly\";\r\n\r\nBlockly.Blocks[\"move\"] = {\r\n    init: function () {\r\n        this.appendDummyInput()\r\n            .appendField(\"Move\")\r\n            .appendField(new Blockly.FieldNumber(0), \"steps\")\r\n            .appendField(\"steps\")\r\n            .appendField(new Blockly.FieldDropdown([\r\n                ['in forward direction', 'f'],\r\n                ['in backward direction', 'b']\r\n            ]), 'dir');\r\n        this.setPreviousStatement(true, null);\r\n        this.setNextStatement(true, null);\r\n        this.setColour(230);\r\n        this.setTooltip(\"\");\r\n        this.setHelpUrl(\"\");\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"move\"] = function (block) {\r\n    let steps = block.getFieldValue(\"steps\");\r\n    let dir = block.getFieldValue(\"dir\");\r\n    let code = `draw(\"${dir === 'f' ? 'fd' : 'bk'} ${steps}\", context);\\n`;\r\n    return code;\r\n};\r\n\r\nBlockly.Blocks[\"rotate\"] = {\r\n    init: function () {\r\n        this.appendDummyInput()\r\n            .appendField(\"Rotate\")\r\n            .appendField(new Blockly.FieldNumber(0), \"degrees\")\r\n            .appendField(\"degrees\")\r\n            .appendField(new Blockly.FieldDropdown([\r\n                ['in left direction', 'l'],\r\n                ['in right direction', 'r']\r\n            ]), 'dir');\r\n        this.setPreviousStatement(true, null);\r\n        this.setNextStatement(true, null);\r\n        this.setColour(230);\r\n        this.setTooltip(\"\");\r\n        this.setHelpUrl(\"\");\r\n    }\r\n};\r\n\r\nBlockly.JavaScript[\"rotate\"] = function (block) {\r\n    let degrees = block.getFieldValue(\"degrees\");\r\n    let dir = block.getFieldValue(\"dir\");\r\n    let code = `draw(\"${dir === 'l' ? 'lt' : 'rt'} ${degrees}\", context);\\n`;\r\n    return code;\r\n};\r\n","import React from 'react';\r\n\r\nimport ReactBlockly from \"react-blockly\";\r\nimport Blockly from \"blockly\";\r\nimport * as fs from \"browserify-fs\";\r\n\r\nimport \"./customBlocks/expressions\";\r\nimport \"./customBlocks/operations\";\r\nimport \"./customBlocks/variables\";\r\nimport \"./customBlocks/logic\"\r\nimport \"./customBlocks/conditionals\";\r\nimport \"./customBlocks/loops\";\r\nimport \"./customBlocks/movement\";\r\n\r\nconst BlocklyApp = () => {\r\n    const initialXml =\r\n        '<xml xmlns=\"https://developers.google.com/blockly/xml\"></xml>';\r\n\r\n    const toolboxCategories = [\r\n        {\r\n            name: \"Variables\",\r\n            colour: \"#5CA699\",\r\n            blocks: [\r\n                {\r\n                    type: \"variable_set\"\r\n                },\r\n                {\r\n                    type: \"variable_modify\"\r\n                },\r\n                {\r\n                    type: \"variable_get\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            name: \"Expressions\",\r\n            colour: \"#5CA699\",\r\n            blocks: [\r\n                {\r\n                    type: \"text_expression\"\r\n                },\r\n                {\r\n                    type: \"number_expression\"\r\n                },\r\n                {\r\n                    type: \"boolean_expression\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            name: \"Operations\",\r\n            colour: \"#5C81A6\",\r\n            blocks: [\r\n                {\r\n                    type: \"add_operation\"\r\n                },\r\n                {\r\n                    type: \"sub_operation\"\r\n                },\r\n                {\r\n                    type: \"mul_operation\"\r\n                },\r\n                {\r\n                    type: \"div_operation\"\r\n                },\r\n                {\r\n                    type: \"mod_operation\"\r\n                },\r\n                {\r\n                    type: \"inc_operation\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            name: \"Logic\",\r\n            colour: \"#5C81A6\",\r\n            blocks: [\r\n                {\r\n                    type: \"equals_logic\"\r\n                },\r\n                {\r\n                    type: \"not_equals_logic\"\r\n                },\r\n                {\r\n                    type: \"less_than_logic\"\r\n                },\r\n                {\r\n                    type: \"greater_than_logic\"\r\n                },\r\n                {\r\n                    type: \"less_than_equals_logic\"\r\n                },\r\n                {\r\n                    type: \"greater_than_equals_logic\"\r\n                },\r\n            ]\r\n        },\r\n        {\r\n            name: \"Control\",\r\n            colour: \"#5C81A6\",\r\n            blocks: [\r\n                {\r\n                    type: \"if_conditional\"\r\n                },\r\n                {\r\n                    type: \"loops_while\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            name: \"Motion\",\r\n            colour: \"#5C81A6\",\r\n            blocks: [\r\n                {\r\n                    type: \"move\"\r\n                },\r\n                {\r\n                    type: \"rotate\"\r\n                }\r\n            ]\r\n        }\r\n    ];\r\n\r\n    function workspaceDidChange(workspace) {\r\n        const topBlocks = workspace.getTopBlocks(true);\r\n        let valid = true;\r\n        topBlocks.forEach(e => {\r\n            valid = valid & (e.allInputsFilled())\r\n        })\r\n        let code = null;\r\n        if (valid) {\r\n            code = Blockly.JavaScript.workspaceToCode(workspace) + 'drawTurtle(context);';\r\n            if (code.includes('let  =')) {\r\n                code = 'Ensure all the blocks and statements are filled'\r\n            }\r\n        } else {\r\n            code = 'Ensure all the blocks and statements are filled'\r\n        }\r\n        fs.writeFile(\"./bot.js\", code);\r\n        if (document.getElementById(\"code\")) document.getElementById(\"code\").value = code;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ReactBlockly\r\n                toolboxCategories={toolboxCategories}\r\n                initialXml={initialXml}\r\n                wrapperDivClassName=\"fill-height\"\r\n                workspaceConfiguration={{\r\n                    grid: {\r\n                        spacing: 20,\r\n                        length: 3,\r\n                        colour: \"#ccc\",\r\n                        snap: true\r\n                    }\r\n                }}\r\n                workspaceDidChange={workspaceDidChange}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default BlocklyApp;\r\n","import \"./App.css\";\nimport React from \"react\";\nimport { Button, Row, Col, Input, Typography } from \"antd\";\nimport BlocklyApp from \"./BlocklyApp\";\nimport DrawCanvas from \"./DrawCanvas\";\nconst { TextArea } = Input;\n\nexport default function App() {\n    const [command, setCommand] = React.useState('');\n\n    React.useEffect(() => {\n        setCommand('drawTurtle(context);');\n    }, [])\n\n    return (\n        <>\n            <Row>\n                <Col span={14}>\n                    <BlocklyApp />\n                </Col>\n                <Col span={10}>\n                    <Button onClick={() => setCommand(document.getElementById(\"code\").value)}>Run</Button>\n                    <DrawCanvas command={command} width=\"625\" height=\"600\" style={{border: '1px solid black'}} />\n                </Col>\n            </Row>\n        \n            <Row>\n                <Col span={24}>\n                    <Typography>JavaScript Code:</Typography>\n                    <Button onClick={() => setCommand(document.getElementById(\"code\").value)}>Run</Button>\n                    <TextArea \n                        id=\"code\"\n                        style={{height: '400px', width: '100%'}}\n                        value=\"\"\n                    />\n                </Col>\n                \n            </Row>\n        </>\n    );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}